/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/style.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/style.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `html * {\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: white;\n    background-color: black;\n}\n\nh1 {\n    margin: 1rem;\n    font-size: 35pt;\n}\n\nh2 {\n    font-size: 25pt;\n    padding: 0pt;\n    margin-bottom: 0pt;\n    margin-top: 10pt;\n}\n\nh3 {\n    margin-bottom: 0pt;\n    margin-top: 5pt;\n}\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    justify-content: flex-start;\n}\n\n.col {\n    display: flex;\n    flex-direction: column;\n}\n\n\n#left {\n    flex: 0 1 30%;\n}\n\n#right {\n    flex: 1; \n    min-width: 200px; \n}\n\n\n#headshot {\n    max-width: 100%;\n    height: auto;\n    border-radius: 20pt;\n    margin: 1rem;\n}\n\n#headerText {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n}\n\n#headerText > h1 {\n    margin: .5rem;\n}\n\n#wave {\n    transition: transform 0.3s ease-in-out;\n    animation: wave-load 1s ease-in-out 1;\n    /* padding: 0; */\n    margin: 5pt;\n}\n\n#headerText:hover #wave {\n    animation: wave-hover 1s ease-in-out;\n}\n\n#resume {\n    /* width: 130pt; */\n    background-color: black;\n    border-color: gold;\n    border-radius: 10pt;\n    /* margin: 28px auto 0px auto; */\n    margin-bottom: 0pt;\n    margin-top: 10pt;\n    padding: 5pt;\n    cursor: pointer;\n}\n\n.super {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-content: center;\n    align-content: baseline;\n    border-bottom: 1pt solid white;\n}\n\n@keyframes wave-hover {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(45deg); }\n    50% { transform: rotate(-45deg); }\n    75% { transform: rotate(45deg); }\n    100% { transform: rotate(0deg); }\n}\n\n@keyframes wave-load {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(45deg); }\n    50% { transform: rotate(-45deg); }\n    75% { transform: rotate(45deg); }\n    100% { transform: rotate(0deg); }\n}\n\nfooter {\n    border-top: 3pt solid white;\n}\n\nheader {\n    border-bottom: 3pt solid white;\n}\n\n.subwayIcon {\n    max-width: 20pt;\n    margin: 2pt;\n    cursor: pointer;\n}\n\n#subwayIconList {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin: 1rem;\n\n}\n\n.subwayDisplay {\n    display: flex;\n    flex-direction: column;\n}\n\n#tables {\n    display: flex;\n    flex-direction: row;\n}\n\nth {\n    text-align: left;\n    border-bottom: 1pt solid white;\n}\n\ntable {\n    margin: 10pt;\n}\n\n.activeLine {\n    max-width: 50pt;\n    margin: 2pt;\n\n}`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./src/style.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./node_modules/gtfs-realtime-bindings/gtfs-realtime.js":
/*!**************************************************************!*\
  !*** ./node_modules/gtfs-realtime-bindings/gtfs-realtime.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2019 Google, MobilityData\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.transit_realtime = (function() {\n\n    /**\n     * Namespace transit_realtime.\n     * @exports transit_realtime\n     * @namespace\n     */\n    var transit_realtime = {};\n\n    transit_realtime.FeedMessage = (function() {\n\n        /**\n         * Properties of a FeedMessage.\n         * @memberof transit_realtime\n         * @interface IFeedMessage\n         * @property {transit_realtime.IFeedHeader} header FeedMessage header\n         * @property {Array.<transit_realtime.IFeedEntity>|null} [entity] FeedMessage entity\n         */\n\n        /**\n         * Constructs a new FeedMessage.\n         * @memberof transit_realtime\n         * @classdesc Represents a FeedMessage.\n         * @implements IFeedMessage\n         * @constructor\n         * @param {transit_realtime.IFeedMessage=} [properties] Properties to set\n         */\n        function FeedMessage(properties) {\n            this.entity = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FeedMessage header.\n         * @member {transit_realtime.IFeedHeader} header\n         * @memberof transit_realtime.FeedMessage\n         * @instance\n         */\n        FeedMessage.prototype.header = null;\n\n        /**\n         * FeedMessage entity.\n         * @member {Array.<transit_realtime.IFeedEntity>} entity\n         * @memberof transit_realtime.FeedMessage\n         * @instance\n         */\n        FeedMessage.prototype.entity = $util.emptyArray;\n\n        /**\n         * Creates a new FeedMessage instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {transit_realtime.IFeedMessage=} [properties] Properties to set\n         * @returns {transit_realtime.FeedMessage} FeedMessage instance\n         */\n        FeedMessage.create = function create(properties) {\n            return new FeedMessage(properties);\n        };\n\n        /**\n         * Encodes the specified FeedMessage message. Does not implicitly {@link transit_realtime.FeedMessage.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {transit_realtime.IFeedMessage} message FeedMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedMessage.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            $root.transit_realtime.FeedHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.entity != null && message.entity.length)\n                for (var i = 0; i < message.entity.length; ++i)\n                    $root.transit_realtime.FeedEntity.encode(message.entity[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FeedMessage message, length delimited. Does not implicitly {@link transit_realtime.FeedMessage.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {transit_realtime.IFeedMessage} message FeedMessage message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedMessage.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FeedMessage message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.FeedMessage} FeedMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedMessage.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.FeedMessage();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.header = $root.transit_realtime.FeedHeader.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.entity && message.entity.length))\n                            message.entity = [];\n                        message.entity.push($root.transit_realtime.FeedEntity.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"header\"))\n                throw $util.ProtocolError(\"missing required 'header'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a FeedMessage message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.FeedMessage} FeedMessage\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedMessage.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FeedMessage message.\n         * @function verify\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FeedMessage.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            {\n                var error = $root.transit_realtime.FeedHeader.verify(message.header);\n                if (error)\n                    return \"header.\" + error;\n            }\n            if (message.entity != null && message.hasOwnProperty(\"entity\")) {\n                if (!Array.isArray(message.entity))\n                    return \"entity: array expected\";\n                for (var i = 0; i < message.entity.length; ++i) {\n                    var error = $root.transit_realtime.FeedEntity.verify(message.entity[i]);\n                    if (error)\n                        return \"entity.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FeedMessage message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.FeedMessage} FeedMessage\n         */\n        FeedMessage.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.FeedMessage)\n                return object;\n            var message = new $root.transit_realtime.FeedMessage();\n            if (object.header != null) {\n                if (typeof object.header !== \"object\")\n                    throw TypeError(\".transit_realtime.FeedMessage.header: object expected\");\n                message.header = $root.transit_realtime.FeedHeader.fromObject(object.header);\n            }\n            if (object.entity) {\n                if (!Array.isArray(object.entity))\n                    throw TypeError(\".transit_realtime.FeedMessage.entity: array expected\");\n                message.entity = [];\n                for (var i = 0; i < object.entity.length; ++i) {\n                    if (typeof object.entity[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.FeedMessage.entity: object expected\");\n                    message.entity[i] = $root.transit_realtime.FeedEntity.fromObject(object.entity[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FeedMessage message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {transit_realtime.FeedMessage} message FeedMessage\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FeedMessage.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.entity = [];\n            if (options.defaults)\n                object.header = null;\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                object.header = $root.transit_realtime.FeedHeader.toObject(message.header, options);\n            if (message.entity && message.entity.length) {\n                object.entity = [];\n                for (var j = 0; j < message.entity.length; ++j)\n                    object.entity[j] = $root.transit_realtime.FeedEntity.toObject(message.entity[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FeedMessage to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.FeedMessage\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FeedMessage.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FeedMessage\n         * @function getTypeUrl\n         * @memberof transit_realtime.FeedMessage\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FeedMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.FeedMessage\";\n        };\n\n        return FeedMessage;\n    })();\n\n    transit_realtime.FeedHeader = (function() {\n\n        /**\n         * Properties of a FeedHeader.\n         * @memberof transit_realtime\n         * @interface IFeedHeader\n         * @property {string} gtfsRealtimeVersion FeedHeader gtfsRealtimeVersion\n         * @property {transit_realtime.FeedHeader.Incrementality|null} [incrementality] FeedHeader incrementality\n         * @property {number|Long|null} [timestamp] FeedHeader timestamp\n         */\n\n        /**\n         * Constructs a new FeedHeader.\n         * @memberof transit_realtime\n         * @classdesc Represents a FeedHeader.\n         * @implements IFeedHeader\n         * @constructor\n         * @param {transit_realtime.IFeedHeader=} [properties] Properties to set\n         */\n        function FeedHeader(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FeedHeader gtfsRealtimeVersion.\n         * @member {string} gtfsRealtimeVersion\n         * @memberof transit_realtime.FeedHeader\n         * @instance\n         */\n        FeedHeader.prototype.gtfsRealtimeVersion = \"\";\n\n        /**\n         * FeedHeader incrementality.\n         * @member {transit_realtime.FeedHeader.Incrementality} incrementality\n         * @memberof transit_realtime.FeedHeader\n         * @instance\n         */\n        FeedHeader.prototype.incrementality = 0;\n\n        /**\n         * FeedHeader timestamp.\n         * @member {number|Long} timestamp\n         * @memberof transit_realtime.FeedHeader\n         * @instance\n         */\n        FeedHeader.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new FeedHeader instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {transit_realtime.IFeedHeader=} [properties] Properties to set\n         * @returns {transit_realtime.FeedHeader} FeedHeader instance\n         */\n        FeedHeader.create = function create(properties) {\n            return new FeedHeader(properties);\n        };\n\n        /**\n         * Encodes the specified FeedHeader message. Does not implicitly {@link transit_realtime.FeedHeader.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {transit_realtime.IFeedHeader} message FeedHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedHeader.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.gtfsRealtimeVersion);\n            if (message.incrementality != null && Object.hasOwnProperty.call(message, \"incrementality\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.incrementality);\n            if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timestamp);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FeedHeader message, length delimited. Does not implicitly {@link transit_realtime.FeedHeader.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {transit_realtime.IFeedHeader} message FeedHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedHeader.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FeedHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.FeedHeader} FeedHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedHeader.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.FeedHeader();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.gtfsRealtimeVersion = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.incrementality = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.timestamp = reader.uint64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"gtfsRealtimeVersion\"))\n                throw $util.ProtocolError(\"missing required 'gtfsRealtimeVersion'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a FeedHeader message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.FeedHeader} FeedHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedHeader.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FeedHeader message.\n         * @function verify\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FeedHeader.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.gtfsRealtimeVersion))\n                return \"gtfsRealtimeVersion: string expected\";\n            if (message.incrementality != null && message.hasOwnProperty(\"incrementality\"))\n                switch (message.incrementality) {\n                default:\n                    return \"incrementality: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FeedHeader message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.FeedHeader} FeedHeader\n         */\n        FeedHeader.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.FeedHeader)\n                return object;\n            var message = new $root.transit_realtime.FeedHeader();\n            if (object.gtfsRealtimeVersion != null)\n                message.gtfsRealtimeVersion = String(object.gtfsRealtimeVersion);\n            switch (object.incrementality) {\n            default:\n                if (typeof object.incrementality === \"number\") {\n                    message.incrementality = object.incrementality;\n                    break;\n                }\n                break;\n            case \"FULL_DATASET\":\n            case 0:\n                message.incrementality = 0;\n                break;\n            case \"DIFFERENTIAL\":\n            case 1:\n                message.incrementality = 1;\n                break;\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FeedHeader message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {transit_realtime.FeedHeader} message FeedHeader\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FeedHeader.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.gtfsRealtimeVersion = \"\";\n                object.incrementality = options.enums === String ? \"FULL_DATASET\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n            }\n            if (message.gtfsRealtimeVersion != null && message.hasOwnProperty(\"gtfsRealtimeVersion\"))\n                object.gtfsRealtimeVersion = message.gtfsRealtimeVersion;\n            if (message.incrementality != null && message.hasOwnProperty(\"incrementality\"))\n                object.incrementality = options.enums === String ? $root.transit_realtime.FeedHeader.Incrementality[message.incrementality] === undefined ? message.incrementality : $root.transit_realtime.FeedHeader.Incrementality[message.incrementality] : message.incrementality;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;\n            return object;\n        };\n\n        /**\n         * Converts this FeedHeader to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.FeedHeader\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FeedHeader.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FeedHeader\n         * @function getTypeUrl\n         * @memberof transit_realtime.FeedHeader\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FeedHeader.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.FeedHeader\";\n        };\n\n        /**\n         * Incrementality enum.\n         * @name transit_realtime.FeedHeader.Incrementality\n         * @enum {number}\n         * @property {number} FULL_DATASET=0 FULL_DATASET value\n         * @property {number} DIFFERENTIAL=1 DIFFERENTIAL value\n         */\n        FeedHeader.Incrementality = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"FULL_DATASET\"] = 0;\n            values[valuesById[1] = \"DIFFERENTIAL\"] = 1;\n            return values;\n        })();\n\n        return FeedHeader;\n    })();\n\n    transit_realtime.FeedEntity = (function() {\n\n        /**\n         * Properties of a FeedEntity.\n         * @memberof transit_realtime\n         * @interface IFeedEntity\n         * @property {string} id FeedEntity id\n         * @property {boolean|null} [isDeleted] FeedEntity isDeleted\n         * @property {transit_realtime.ITripUpdate|null} [tripUpdate] FeedEntity tripUpdate\n         * @property {transit_realtime.IVehiclePosition|null} [vehicle] FeedEntity vehicle\n         * @property {transit_realtime.IAlert|null} [alert] FeedEntity alert\n         */\n\n        /**\n         * Constructs a new FeedEntity.\n         * @memberof transit_realtime\n         * @classdesc Represents a FeedEntity.\n         * @implements IFeedEntity\n         * @constructor\n         * @param {transit_realtime.IFeedEntity=} [properties] Properties to set\n         */\n        function FeedEntity(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FeedEntity id.\n         * @member {string} id\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         */\n        FeedEntity.prototype.id = \"\";\n\n        /**\n         * FeedEntity isDeleted.\n         * @member {boolean} isDeleted\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         */\n        FeedEntity.prototype.isDeleted = false;\n\n        /**\n         * FeedEntity tripUpdate.\n         * @member {transit_realtime.ITripUpdate|null|undefined} tripUpdate\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         */\n        FeedEntity.prototype.tripUpdate = null;\n\n        /**\n         * FeedEntity vehicle.\n         * @member {transit_realtime.IVehiclePosition|null|undefined} vehicle\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         */\n        FeedEntity.prototype.vehicle = null;\n\n        /**\n         * FeedEntity alert.\n         * @member {transit_realtime.IAlert|null|undefined} alert\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         */\n        FeedEntity.prototype.alert = null;\n\n        /**\n         * Creates a new FeedEntity instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {transit_realtime.IFeedEntity=} [properties] Properties to set\n         * @returns {transit_realtime.FeedEntity} FeedEntity instance\n         */\n        FeedEntity.create = function create(properties) {\n            return new FeedEntity(properties);\n        };\n\n        /**\n         * Encodes the specified FeedEntity message. Does not implicitly {@link transit_realtime.FeedEntity.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {transit_realtime.IFeedEntity} message FeedEntity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedEntity.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.isDeleted != null && Object.hasOwnProperty.call(message, \"isDeleted\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isDeleted);\n            if (message.tripUpdate != null && Object.hasOwnProperty.call(message, \"tripUpdate\"))\n                $root.transit_realtime.TripUpdate.encode(message.tripUpdate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.vehicle != null && Object.hasOwnProperty.call(message, \"vehicle\"))\n                $root.transit_realtime.VehiclePosition.encode(message.vehicle, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.alert != null && Object.hasOwnProperty.call(message, \"alert\"))\n                $root.transit_realtime.Alert.encode(message.alert, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FeedEntity message, length delimited. Does not implicitly {@link transit_realtime.FeedEntity.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {transit_realtime.IFeedEntity} message FeedEntity message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FeedEntity.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FeedEntity message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.FeedEntity} FeedEntity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedEntity.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.FeedEntity();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.isDeleted = reader.bool();\n                        break;\n                    }\n                case 3: {\n                        message.tripUpdate = $root.transit_realtime.TripUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.vehicle = $root.transit_realtime.VehiclePosition.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.alert = $root.transit_realtime.Alert.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"id\"))\n                throw $util.ProtocolError(\"missing required 'id'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a FeedEntity message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.FeedEntity} FeedEntity\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FeedEntity.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FeedEntity message.\n         * @function verify\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FeedEntity.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (!$util.isString(message.id))\n                return \"id: string expected\";\n            if (message.isDeleted != null && message.hasOwnProperty(\"isDeleted\"))\n                if (typeof message.isDeleted !== \"boolean\")\n                    return \"isDeleted: boolean expected\";\n            if (message.tripUpdate != null && message.hasOwnProperty(\"tripUpdate\")) {\n                var error = $root.transit_realtime.TripUpdate.verify(message.tripUpdate);\n                if (error)\n                    return \"tripUpdate.\" + error;\n            }\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\")) {\n                var error = $root.transit_realtime.VehiclePosition.verify(message.vehicle);\n                if (error)\n                    return \"vehicle.\" + error;\n            }\n            if (message.alert != null && message.hasOwnProperty(\"alert\")) {\n                var error = $root.transit_realtime.Alert.verify(message.alert);\n                if (error)\n                    return \"alert.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FeedEntity message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.FeedEntity} FeedEntity\n         */\n        FeedEntity.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.FeedEntity)\n                return object;\n            var message = new $root.transit_realtime.FeedEntity();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.isDeleted != null)\n                message.isDeleted = Boolean(object.isDeleted);\n            if (object.tripUpdate != null) {\n                if (typeof object.tripUpdate !== \"object\")\n                    throw TypeError(\".transit_realtime.FeedEntity.tripUpdate: object expected\");\n                message.tripUpdate = $root.transit_realtime.TripUpdate.fromObject(object.tripUpdate);\n            }\n            if (object.vehicle != null) {\n                if (typeof object.vehicle !== \"object\")\n                    throw TypeError(\".transit_realtime.FeedEntity.vehicle: object expected\");\n                message.vehicle = $root.transit_realtime.VehiclePosition.fromObject(object.vehicle);\n            }\n            if (object.alert != null) {\n                if (typeof object.alert !== \"object\")\n                    throw TypeError(\".transit_realtime.FeedEntity.alert: object expected\");\n                message.alert = $root.transit_realtime.Alert.fromObject(object.alert);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FeedEntity message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {transit_realtime.FeedEntity} message FeedEntity\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FeedEntity.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.isDeleted = false;\n                object.tripUpdate = null;\n                object.vehicle = null;\n                object.alert = null;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.isDeleted != null && message.hasOwnProperty(\"isDeleted\"))\n                object.isDeleted = message.isDeleted;\n            if (message.tripUpdate != null && message.hasOwnProperty(\"tripUpdate\"))\n                object.tripUpdate = $root.transit_realtime.TripUpdate.toObject(message.tripUpdate, options);\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\"))\n                object.vehicle = $root.transit_realtime.VehiclePosition.toObject(message.vehicle, options);\n            if (message.alert != null && message.hasOwnProperty(\"alert\"))\n                object.alert = $root.transit_realtime.Alert.toObject(message.alert, options);\n            return object;\n        };\n\n        /**\n         * Converts this FeedEntity to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.FeedEntity\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FeedEntity.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FeedEntity\n         * @function getTypeUrl\n         * @memberof transit_realtime.FeedEntity\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FeedEntity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.FeedEntity\";\n        };\n\n        return FeedEntity;\n    })();\n\n    transit_realtime.TripUpdate = (function() {\n\n        /**\n         * Properties of a TripUpdate.\n         * @memberof transit_realtime\n         * @interface ITripUpdate\n         * @property {transit_realtime.ITripDescriptor} trip TripUpdate trip\n         * @property {transit_realtime.IVehicleDescriptor|null} [vehicle] TripUpdate vehicle\n         * @property {Array.<transit_realtime.TripUpdate.IStopTimeUpdate>|null} [stopTimeUpdate] TripUpdate stopTimeUpdate\n         * @property {number|Long|null} [timestamp] TripUpdate timestamp\n         * @property {number|null} [delay] TripUpdate delay\n         * @property {transit_realtime.TripUpdate.ITripProperties|null} [tripProperties] TripUpdate tripProperties\n         */\n\n        /**\n         * Constructs a new TripUpdate.\n         * @memberof transit_realtime\n         * @classdesc Represents a TripUpdate.\n         * @implements ITripUpdate\n         * @constructor\n         * @param {transit_realtime.ITripUpdate=} [properties] Properties to set\n         */\n        function TripUpdate(properties) {\n            this.stopTimeUpdate = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TripUpdate trip.\n         * @member {transit_realtime.ITripDescriptor} trip\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.trip = null;\n\n        /**\n         * TripUpdate vehicle.\n         * @member {transit_realtime.IVehicleDescriptor|null|undefined} vehicle\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.vehicle = null;\n\n        /**\n         * TripUpdate stopTimeUpdate.\n         * @member {Array.<transit_realtime.TripUpdate.IStopTimeUpdate>} stopTimeUpdate\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.stopTimeUpdate = $util.emptyArray;\n\n        /**\n         * TripUpdate timestamp.\n         * @member {number|Long} timestamp\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TripUpdate delay.\n         * @member {number} delay\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.delay = 0;\n\n        /**\n         * TripUpdate tripProperties.\n         * @member {transit_realtime.TripUpdate.ITripProperties|null|undefined} tripProperties\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         */\n        TripUpdate.prototype.tripProperties = null;\n\n        /**\n         * Creates a new TripUpdate instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {transit_realtime.ITripUpdate=} [properties] Properties to set\n         * @returns {transit_realtime.TripUpdate} TripUpdate instance\n         */\n        TripUpdate.create = function create(properties) {\n            return new TripUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified TripUpdate message. Does not implicitly {@link transit_realtime.TripUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {transit_realtime.ITripUpdate} message TripUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TripUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            $root.transit_realtime.TripDescriptor.encode(message.trip, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.stopTimeUpdate != null && message.stopTimeUpdate.length)\n                for (var i = 0; i < message.stopTimeUpdate.length; ++i)\n                    $root.transit_realtime.TripUpdate.StopTimeUpdate.encode(message.stopTimeUpdate[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.vehicle != null && Object.hasOwnProperty.call(message, \"vehicle\"))\n                $root.transit_realtime.VehicleDescriptor.encode(message.vehicle, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);\n            if (message.delay != null && Object.hasOwnProperty.call(message, \"delay\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.delay);\n            if (message.tripProperties != null && Object.hasOwnProperty.call(message, \"tripProperties\"))\n                $root.transit_realtime.TripUpdate.TripProperties.encode(message.tripProperties, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TripUpdate message, length delimited. Does not implicitly {@link transit_realtime.TripUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {transit_realtime.ITripUpdate} message TripUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TripUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TripUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.TripUpdate} TripUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TripUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripUpdate();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.trip = $root.transit_realtime.TripDescriptor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.vehicle = $root.transit_realtime.VehicleDescriptor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.stopTimeUpdate && message.stopTimeUpdate.length))\n                            message.stopTimeUpdate = [];\n                        message.stopTimeUpdate.push($root.transit_realtime.TripUpdate.StopTimeUpdate.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        message.timestamp = reader.uint64();\n                        break;\n                    }\n                case 5: {\n                        message.delay = reader.int32();\n                        break;\n                    }\n                case 6: {\n                        message.tripProperties = $root.transit_realtime.TripUpdate.TripProperties.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"trip\"))\n                throw $util.ProtocolError(\"missing required 'trip'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a TripUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.TripUpdate} TripUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TripUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TripUpdate message.\n         * @function verify\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TripUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            {\n                var error = $root.transit_realtime.TripDescriptor.verify(message.trip);\n                if (error)\n                    return \"trip.\" + error;\n            }\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\")) {\n                var error = $root.transit_realtime.VehicleDescriptor.verify(message.vehicle);\n                if (error)\n                    return \"vehicle.\" + error;\n            }\n            if (message.stopTimeUpdate != null && message.hasOwnProperty(\"stopTimeUpdate\")) {\n                if (!Array.isArray(message.stopTimeUpdate))\n                    return \"stopTimeUpdate: array expected\";\n                for (var i = 0; i < message.stopTimeUpdate.length; ++i) {\n                    var error = $root.transit_realtime.TripUpdate.StopTimeUpdate.verify(message.stopTimeUpdate[i]);\n                    if (error)\n                        return \"stopTimeUpdate.\" + error;\n                }\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.delay != null && message.hasOwnProperty(\"delay\"))\n                if (!$util.isInteger(message.delay))\n                    return \"delay: integer expected\";\n            if (message.tripProperties != null && message.hasOwnProperty(\"tripProperties\")) {\n                var error = $root.transit_realtime.TripUpdate.TripProperties.verify(message.tripProperties);\n                if (error)\n                    return \"tripProperties.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TripUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.TripUpdate} TripUpdate\n         */\n        TripUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.TripUpdate)\n                return object;\n            var message = new $root.transit_realtime.TripUpdate();\n            if (object.trip != null) {\n                if (typeof object.trip !== \"object\")\n                    throw TypeError(\".transit_realtime.TripUpdate.trip: object expected\");\n                message.trip = $root.transit_realtime.TripDescriptor.fromObject(object.trip);\n            }\n            if (object.vehicle != null) {\n                if (typeof object.vehicle !== \"object\")\n                    throw TypeError(\".transit_realtime.TripUpdate.vehicle: object expected\");\n                message.vehicle = $root.transit_realtime.VehicleDescriptor.fromObject(object.vehicle);\n            }\n            if (object.stopTimeUpdate) {\n                if (!Array.isArray(object.stopTimeUpdate))\n                    throw TypeError(\".transit_realtime.TripUpdate.stopTimeUpdate: array expected\");\n                message.stopTimeUpdate = [];\n                for (var i = 0; i < object.stopTimeUpdate.length; ++i) {\n                    if (typeof object.stopTimeUpdate[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.TripUpdate.stopTimeUpdate: object expected\");\n                    message.stopTimeUpdate[i] = $root.transit_realtime.TripUpdate.StopTimeUpdate.fromObject(object.stopTimeUpdate[i]);\n                }\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);\n            if (object.delay != null)\n                message.delay = object.delay | 0;\n            if (object.tripProperties != null) {\n                if (typeof object.tripProperties !== \"object\")\n                    throw TypeError(\".transit_realtime.TripUpdate.tripProperties: object expected\");\n                message.tripProperties = $root.transit_realtime.TripUpdate.TripProperties.fromObject(object.tripProperties);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TripUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {transit_realtime.TripUpdate} message TripUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TripUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.stopTimeUpdate = [];\n            if (options.defaults) {\n                object.trip = null;\n                object.vehicle = null;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                object.delay = 0;\n                object.tripProperties = null;\n            }\n            if (message.trip != null && message.hasOwnProperty(\"trip\"))\n                object.trip = $root.transit_realtime.TripDescriptor.toObject(message.trip, options);\n            if (message.stopTimeUpdate && message.stopTimeUpdate.length) {\n                object.stopTimeUpdate = [];\n                for (var j = 0; j < message.stopTimeUpdate.length; ++j)\n                    object.stopTimeUpdate[j] = $root.transit_realtime.TripUpdate.StopTimeUpdate.toObject(message.stopTimeUpdate[j], options);\n            }\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\"))\n                object.vehicle = $root.transit_realtime.VehicleDescriptor.toObject(message.vehicle, options);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;\n            if (message.delay != null && message.hasOwnProperty(\"delay\"))\n                object.delay = message.delay;\n            if (message.tripProperties != null && message.hasOwnProperty(\"tripProperties\"))\n                object.tripProperties = $root.transit_realtime.TripUpdate.TripProperties.toObject(message.tripProperties, options);\n            return object;\n        };\n\n        /**\n         * Converts this TripUpdate to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.TripUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TripUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TripUpdate\n         * @function getTypeUrl\n         * @memberof transit_realtime.TripUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TripUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.TripUpdate\";\n        };\n\n        TripUpdate.StopTimeEvent = (function() {\n\n            /**\n             * Properties of a StopTimeEvent.\n             * @memberof transit_realtime.TripUpdate\n             * @interface IStopTimeEvent\n             * @property {number|null} [delay] StopTimeEvent delay\n             * @property {number|Long|null} [time] StopTimeEvent time\n             * @property {number|null} [uncertainty] StopTimeEvent uncertainty\n             */\n\n            /**\n             * Constructs a new StopTimeEvent.\n             * @memberof transit_realtime.TripUpdate\n             * @classdesc Represents a StopTimeEvent.\n             * @implements IStopTimeEvent\n             * @constructor\n             * @param {transit_realtime.TripUpdate.IStopTimeEvent=} [properties] Properties to set\n             */\n            function StopTimeEvent(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * StopTimeEvent delay.\n             * @member {number} delay\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @instance\n             */\n            StopTimeEvent.prototype.delay = 0;\n\n            /**\n             * StopTimeEvent time.\n             * @member {number|Long} time\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @instance\n             */\n            StopTimeEvent.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * StopTimeEvent uncertainty.\n             * @member {number} uncertainty\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @instance\n             */\n            StopTimeEvent.prototype.uncertainty = 0;\n\n            /**\n             * Creates a new StopTimeEvent instance using the specified properties.\n             * @function create\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeEvent=} [properties] Properties to set\n             * @returns {transit_realtime.TripUpdate.StopTimeEvent} StopTimeEvent instance\n             */\n            StopTimeEvent.create = function create(properties) {\n                return new StopTimeEvent(properties);\n            };\n\n            /**\n             * Encodes the specified StopTimeEvent message. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeEvent.verify|verify} messages.\n             * @function encode\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeEvent} message StopTimeEvent message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            StopTimeEvent.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.delay != null && Object.hasOwnProperty.call(message, \"delay\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.delay);\n                if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);\n                if (message.uncertainty != null && Object.hasOwnProperty.call(message, \"uncertainty\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.uncertainty);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified StopTimeEvent message, length delimited. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeEvent.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeEvent} message StopTimeEvent message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            StopTimeEvent.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a StopTimeEvent message from the specified reader or buffer.\n             * @function decode\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {transit_realtime.TripUpdate.StopTimeEvent} StopTimeEvent\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            StopTimeEvent.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripUpdate.StopTimeEvent();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.delay = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.time = reader.int64();\n                            break;\n                        }\n                    case 3: {\n                            message.uncertainty = reader.int32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a StopTimeEvent message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {transit_realtime.TripUpdate.StopTimeEvent} StopTimeEvent\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            StopTimeEvent.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a StopTimeEvent message.\n             * @function verify\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            StopTimeEvent.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.delay != null && message.hasOwnProperty(\"delay\"))\n                    if (!$util.isInteger(message.delay))\n                        return \"delay: integer expected\";\n                if (message.time != null && message.hasOwnProperty(\"time\"))\n                    if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                        return \"time: integer|Long expected\";\n                if (message.uncertainty != null && message.hasOwnProperty(\"uncertainty\"))\n                    if (!$util.isInteger(message.uncertainty))\n                        return \"uncertainty: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a StopTimeEvent message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {transit_realtime.TripUpdate.StopTimeEvent} StopTimeEvent\n             */\n            StopTimeEvent.fromObject = function fromObject(object) {\n                if (object instanceof $root.transit_realtime.TripUpdate.StopTimeEvent)\n                    return object;\n                var message = new $root.transit_realtime.TripUpdate.StopTimeEvent();\n                if (object.delay != null)\n                    message.delay = object.delay | 0;\n                if (object.time != null)\n                    if ($util.Long)\n                        (message.time = $util.Long.fromValue(object.time)).unsigned = false;\n                    else if (typeof object.time === \"string\")\n                        message.time = parseInt(object.time, 10);\n                    else if (typeof object.time === \"number\")\n                        message.time = object.time;\n                    else if (typeof object.time === \"object\")\n                        message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();\n                if (object.uncertainty != null)\n                    message.uncertainty = object.uncertainty | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a StopTimeEvent message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {transit_realtime.TripUpdate.StopTimeEvent} message StopTimeEvent\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            StopTimeEvent.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.delay = 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.time = options.longs === String ? \"0\" : 0;\n                    object.uncertainty = 0;\n                }\n                if (message.delay != null && message.hasOwnProperty(\"delay\"))\n                    object.delay = message.delay;\n                if (message.time != null && message.hasOwnProperty(\"time\"))\n                    if (typeof message.time === \"number\")\n                        object.time = options.longs === String ? String(message.time) : message.time;\n                    else\n                        object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;\n                if (message.uncertainty != null && message.hasOwnProperty(\"uncertainty\"))\n                    object.uncertainty = message.uncertainty;\n                return object;\n            };\n\n            /**\n             * Converts this StopTimeEvent to JSON.\n             * @function toJSON\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            StopTimeEvent.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for StopTimeEvent\n             * @function getTypeUrl\n             * @memberof transit_realtime.TripUpdate.StopTimeEvent\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            StopTimeEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/transit_realtime.TripUpdate.StopTimeEvent\";\n            };\n\n            return StopTimeEvent;\n        })();\n\n        TripUpdate.StopTimeUpdate = (function() {\n\n            /**\n             * Properties of a StopTimeUpdate.\n             * @memberof transit_realtime.TripUpdate\n             * @interface IStopTimeUpdate\n             * @property {number|null} [stopSequence] StopTimeUpdate stopSequence\n             * @property {string|null} [stopId] StopTimeUpdate stopId\n             * @property {transit_realtime.TripUpdate.IStopTimeEvent|null} [arrival] StopTimeUpdate arrival\n             * @property {transit_realtime.TripUpdate.IStopTimeEvent|null} [departure] StopTimeUpdate departure\n             * @property {transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship|null} [scheduleRelationship] StopTimeUpdate scheduleRelationship\n             * @property {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties|null} [stopTimeProperties] StopTimeUpdate stopTimeProperties\n             */\n\n            /**\n             * Constructs a new StopTimeUpdate.\n             * @memberof transit_realtime.TripUpdate\n             * @classdesc Represents a StopTimeUpdate.\n             * @implements IStopTimeUpdate\n             * @constructor\n             * @param {transit_realtime.TripUpdate.IStopTimeUpdate=} [properties] Properties to set\n             */\n            function StopTimeUpdate(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * StopTimeUpdate stopSequence.\n             * @member {number} stopSequence\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.stopSequence = 0;\n\n            /**\n             * StopTimeUpdate stopId.\n             * @member {string} stopId\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.stopId = \"\";\n\n            /**\n             * StopTimeUpdate arrival.\n             * @member {transit_realtime.TripUpdate.IStopTimeEvent|null|undefined} arrival\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.arrival = null;\n\n            /**\n             * StopTimeUpdate departure.\n             * @member {transit_realtime.TripUpdate.IStopTimeEvent|null|undefined} departure\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.departure = null;\n\n            /**\n             * StopTimeUpdate scheduleRelationship.\n             * @member {transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship} scheduleRelationship\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.scheduleRelationship = 0;\n\n            /**\n             * StopTimeUpdate stopTimeProperties.\n             * @member {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties|null|undefined} stopTimeProperties\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             */\n            StopTimeUpdate.prototype.stopTimeProperties = null;\n\n            /**\n             * Creates a new StopTimeUpdate instance using the specified properties.\n             * @function create\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeUpdate=} [properties] Properties to set\n             * @returns {transit_realtime.TripUpdate.StopTimeUpdate} StopTimeUpdate instance\n             */\n            StopTimeUpdate.create = function create(properties) {\n                return new StopTimeUpdate(properties);\n            };\n\n            /**\n             * Encodes the specified StopTimeUpdate message. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeUpdate.verify|verify} messages.\n             * @function encode\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeUpdate} message StopTimeUpdate message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            StopTimeUpdate.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.stopSequence != null && Object.hasOwnProperty.call(message, \"stopSequence\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.stopSequence);\n                if (message.arrival != null && Object.hasOwnProperty.call(message, \"arrival\"))\n                    $root.transit_realtime.TripUpdate.StopTimeEvent.encode(message.arrival, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.departure != null && Object.hasOwnProperty.call(message, \"departure\"))\n                    $root.transit_realtime.TripUpdate.StopTimeEvent.encode(message.departure, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.stopId != null && Object.hasOwnProperty.call(message, \"stopId\"))\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.stopId);\n                if (message.scheduleRelationship != null && Object.hasOwnProperty.call(message, \"scheduleRelationship\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.scheduleRelationship);\n                if (message.stopTimeProperties != null && Object.hasOwnProperty.call(message, \"stopTimeProperties\"))\n                    $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.encode(message.stopTimeProperties, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified StopTimeUpdate message, length delimited. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeUpdate.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {transit_realtime.TripUpdate.IStopTimeUpdate} message StopTimeUpdate message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            StopTimeUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a StopTimeUpdate message from the specified reader or buffer.\n             * @function decode\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {transit_realtime.TripUpdate.StopTimeUpdate} StopTimeUpdate\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            StopTimeUpdate.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripUpdate.StopTimeUpdate();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.stopSequence = reader.uint32();\n                            break;\n                        }\n                    case 4: {\n                            message.stopId = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.arrival = $root.transit_realtime.TripUpdate.StopTimeEvent.decode(reader, reader.uint32());\n                            break;\n                        }\n                    case 3: {\n                            message.departure = $root.transit_realtime.TripUpdate.StopTimeEvent.decode(reader, reader.uint32());\n                            break;\n                        }\n                    case 5: {\n                            message.scheduleRelationship = reader.int32();\n                            break;\n                        }\n                    case 6: {\n                            message.stopTimeProperties = $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a StopTimeUpdate message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {transit_realtime.TripUpdate.StopTimeUpdate} StopTimeUpdate\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            StopTimeUpdate.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a StopTimeUpdate message.\n             * @function verify\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            StopTimeUpdate.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.stopSequence != null && message.hasOwnProperty(\"stopSequence\"))\n                    if (!$util.isInteger(message.stopSequence))\n                        return \"stopSequence: integer expected\";\n                if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                    if (!$util.isString(message.stopId))\n                        return \"stopId: string expected\";\n                if (message.arrival != null && message.hasOwnProperty(\"arrival\")) {\n                    var error = $root.transit_realtime.TripUpdate.StopTimeEvent.verify(message.arrival);\n                    if (error)\n                        return \"arrival.\" + error;\n                }\n                if (message.departure != null && message.hasOwnProperty(\"departure\")) {\n                    var error = $root.transit_realtime.TripUpdate.StopTimeEvent.verify(message.departure);\n                    if (error)\n                        return \"departure.\" + error;\n                }\n                if (message.scheduleRelationship != null && message.hasOwnProperty(\"scheduleRelationship\"))\n                    switch (message.scheduleRelationship) {\n                    default:\n                        return \"scheduleRelationship: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                        break;\n                    }\n                if (message.stopTimeProperties != null && message.hasOwnProperty(\"stopTimeProperties\")) {\n                    var error = $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.verify(message.stopTimeProperties);\n                    if (error)\n                        return \"stopTimeProperties.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a StopTimeUpdate message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {transit_realtime.TripUpdate.StopTimeUpdate} StopTimeUpdate\n             */\n            StopTimeUpdate.fromObject = function fromObject(object) {\n                if (object instanceof $root.transit_realtime.TripUpdate.StopTimeUpdate)\n                    return object;\n                var message = new $root.transit_realtime.TripUpdate.StopTimeUpdate();\n                if (object.stopSequence != null)\n                    message.stopSequence = object.stopSequence >>> 0;\n                if (object.stopId != null)\n                    message.stopId = String(object.stopId);\n                if (object.arrival != null) {\n                    if (typeof object.arrival !== \"object\")\n                        throw TypeError(\".transit_realtime.TripUpdate.StopTimeUpdate.arrival: object expected\");\n                    message.arrival = $root.transit_realtime.TripUpdate.StopTimeEvent.fromObject(object.arrival);\n                }\n                if (object.departure != null) {\n                    if (typeof object.departure !== \"object\")\n                        throw TypeError(\".transit_realtime.TripUpdate.StopTimeUpdate.departure: object expected\");\n                    message.departure = $root.transit_realtime.TripUpdate.StopTimeEvent.fromObject(object.departure);\n                }\n                switch (object.scheduleRelationship) {\n                default:\n                    if (typeof object.scheduleRelationship === \"number\") {\n                        message.scheduleRelationship = object.scheduleRelationship;\n                        break;\n                    }\n                    break;\n                case \"SCHEDULED\":\n                case 0:\n                    message.scheduleRelationship = 0;\n                    break;\n                case \"SKIPPED\":\n                case 1:\n                    message.scheduleRelationship = 1;\n                    break;\n                case \"NO_DATA\":\n                case 2:\n                    message.scheduleRelationship = 2;\n                    break;\n                case \"UNSCHEDULED\":\n                case 3:\n                    message.scheduleRelationship = 3;\n                    break;\n                }\n                if (object.stopTimeProperties != null) {\n                    if (typeof object.stopTimeProperties !== \"object\")\n                        throw TypeError(\".transit_realtime.TripUpdate.StopTimeUpdate.stopTimeProperties: object expected\");\n                    message.stopTimeProperties = $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.fromObject(object.stopTimeProperties);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a StopTimeUpdate message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {transit_realtime.TripUpdate.StopTimeUpdate} message StopTimeUpdate\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            StopTimeUpdate.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.stopSequence = 0;\n                    object.arrival = null;\n                    object.departure = null;\n                    object.stopId = \"\";\n                    object.scheduleRelationship = options.enums === String ? \"SCHEDULED\" : 0;\n                    object.stopTimeProperties = null;\n                }\n                if (message.stopSequence != null && message.hasOwnProperty(\"stopSequence\"))\n                    object.stopSequence = message.stopSequence;\n                if (message.arrival != null && message.hasOwnProperty(\"arrival\"))\n                    object.arrival = $root.transit_realtime.TripUpdate.StopTimeEvent.toObject(message.arrival, options);\n                if (message.departure != null && message.hasOwnProperty(\"departure\"))\n                    object.departure = $root.transit_realtime.TripUpdate.StopTimeEvent.toObject(message.departure, options);\n                if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                    object.stopId = message.stopId;\n                if (message.scheduleRelationship != null && message.hasOwnProperty(\"scheduleRelationship\"))\n                    object.scheduleRelationship = options.enums === String ? $root.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship[message.scheduleRelationship] === undefined ? message.scheduleRelationship : $root.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship[message.scheduleRelationship] : message.scheduleRelationship;\n                if (message.stopTimeProperties != null && message.hasOwnProperty(\"stopTimeProperties\"))\n                    object.stopTimeProperties = $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.toObject(message.stopTimeProperties, options);\n                return object;\n            };\n\n            /**\n             * Converts this StopTimeUpdate to JSON.\n             * @function toJSON\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            StopTimeUpdate.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for StopTimeUpdate\n             * @function getTypeUrl\n             * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            StopTimeUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/transit_realtime.TripUpdate.StopTimeUpdate\";\n            };\n\n            /**\n             * ScheduleRelationship enum.\n             * @name transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship\n             * @enum {number}\n             * @property {number} SCHEDULED=0 SCHEDULED value\n             * @property {number} SKIPPED=1 SKIPPED value\n             * @property {number} NO_DATA=2 NO_DATA value\n             * @property {number} UNSCHEDULED=3 UNSCHEDULED value\n             */\n            StopTimeUpdate.ScheduleRelationship = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"SCHEDULED\"] = 0;\n                values[valuesById[1] = \"SKIPPED\"] = 1;\n                values[valuesById[2] = \"NO_DATA\"] = 2;\n                values[valuesById[3] = \"UNSCHEDULED\"] = 3;\n                return values;\n            })();\n\n            StopTimeUpdate.StopTimeProperties = (function() {\n\n                /**\n                 * Properties of a StopTimeProperties.\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n                 * @interface IStopTimeProperties\n                 * @property {string|null} [assignedStopId] StopTimeProperties assignedStopId\n                 */\n\n                /**\n                 * Constructs a new StopTimeProperties.\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate\n                 * @classdesc Represents a StopTimeProperties.\n                 * @implements IStopTimeProperties\n                 * @constructor\n                 * @param {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties=} [properties] Properties to set\n                 */\n                function StopTimeProperties(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StopTimeProperties assignedStopId.\n                 * @member {string} assignedStopId\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @instance\n                 */\n                StopTimeProperties.prototype.assignedStopId = \"\";\n\n                /**\n                 * Creates a new StopTimeProperties instance using the specified properties.\n                 * @function create\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties=} [properties] Properties to set\n                 * @returns {transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} StopTimeProperties instance\n                 */\n                StopTimeProperties.create = function create(properties) {\n                    return new StopTimeProperties(properties);\n                };\n\n                /**\n                 * Encodes the specified StopTimeProperties message. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.verify|verify} messages.\n                 * @function encode\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties} message StopTimeProperties message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StopTimeProperties.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.assignedStopId != null && Object.hasOwnProperty.call(message, \"assignedStopId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.assignedStopId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StopTimeProperties message, length delimited. Does not implicitly {@link transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {transit_realtime.TripUpdate.StopTimeUpdate.IStopTimeProperties} message StopTimeProperties message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StopTimeProperties.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StopTimeProperties message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} StopTimeProperties\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StopTimeProperties.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1: {\n                                message.assignedStopId = reader.string();\n                                break;\n                            }\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StopTimeProperties message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} StopTimeProperties\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StopTimeProperties.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StopTimeProperties message.\n                 * @function verify\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StopTimeProperties.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.assignedStopId != null && message.hasOwnProperty(\"assignedStopId\"))\n                        if (!$util.isString(message.assignedStopId))\n                            return \"assignedStopId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a StopTimeProperties message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} StopTimeProperties\n                 */\n                StopTimeProperties.fromObject = function fromObject(object) {\n                    if (object instanceof $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)\n                        return object;\n                    var message = new $root.transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties();\n                    if (object.assignedStopId != null)\n                        message.assignedStopId = String(object.assignedStopId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StopTimeProperties message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties} message StopTimeProperties\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StopTimeProperties.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.assignedStopId = \"\";\n                    if (message.assignedStopId != null && message.hasOwnProperty(\"assignedStopId\"))\n                        object.assignedStopId = message.assignedStopId;\n                    return object;\n                };\n\n                /**\n                 * Converts this StopTimeProperties to JSON.\n                 * @function toJSON\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StopTimeProperties.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Gets the default type url for StopTimeProperties\n                 * @function getTypeUrl\n                 * @memberof transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\n                 * @static\n                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                 * @returns {string} The default type url\n                 */\n                StopTimeProperties.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                    if (typeUrlPrefix === undefined) {\n                        typeUrlPrefix = \"type.googleapis.com\";\n                    }\n                    return typeUrlPrefix + \"/transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties\";\n                };\n\n                return StopTimeProperties;\n            })();\n\n            return StopTimeUpdate;\n        })();\n\n        TripUpdate.TripProperties = (function() {\n\n            /**\n             * Properties of a TripProperties.\n             * @memberof transit_realtime.TripUpdate\n             * @interface ITripProperties\n             * @property {string|null} [tripId] TripProperties tripId\n             * @property {string|null} [startDate] TripProperties startDate\n             * @property {string|null} [startTime] TripProperties startTime\n             */\n\n            /**\n             * Constructs a new TripProperties.\n             * @memberof transit_realtime.TripUpdate\n             * @classdesc Represents a TripProperties.\n             * @implements ITripProperties\n             * @constructor\n             * @param {transit_realtime.TripUpdate.ITripProperties=} [properties] Properties to set\n             */\n            function TripProperties(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * TripProperties tripId.\n             * @member {string} tripId\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @instance\n             */\n            TripProperties.prototype.tripId = \"\";\n\n            /**\n             * TripProperties startDate.\n             * @member {string} startDate\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @instance\n             */\n            TripProperties.prototype.startDate = \"\";\n\n            /**\n             * TripProperties startTime.\n             * @member {string} startTime\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @instance\n             */\n            TripProperties.prototype.startTime = \"\";\n\n            /**\n             * Creates a new TripProperties instance using the specified properties.\n             * @function create\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {transit_realtime.TripUpdate.ITripProperties=} [properties] Properties to set\n             * @returns {transit_realtime.TripUpdate.TripProperties} TripProperties instance\n             */\n            TripProperties.create = function create(properties) {\n                return new TripProperties(properties);\n            };\n\n            /**\n             * Encodes the specified TripProperties message. Does not implicitly {@link transit_realtime.TripUpdate.TripProperties.verify|verify} messages.\n             * @function encode\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {transit_realtime.TripUpdate.ITripProperties} message TripProperties message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            TripProperties.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.tripId != null && Object.hasOwnProperty.call(message, \"tripId\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.tripId);\n                if (message.startDate != null && Object.hasOwnProperty.call(message, \"startDate\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.startDate);\n                if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.startTime);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified TripProperties message, length delimited. Does not implicitly {@link transit_realtime.TripUpdate.TripProperties.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {transit_realtime.TripUpdate.ITripProperties} message TripProperties message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            TripProperties.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a TripProperties message from the specified reader or buffer.\n             * @function decode\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {transit_realtime.TripUpdate.TripProperties} TripProperties\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            TripProperties.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripUpdate.TripProperties();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.tripId = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.startDate = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.startTime = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a TripProperties message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {transit_realtime.TripUpdate.TripProperties} TripProperties\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            TripProperties.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a TripProperties message.\n             * @function verify\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            TripProperties.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.tripId != null && message.hasOwnProperty(\"tripId\"))\n                    if (!$util.isString(message.tripId))\n                        return \"tripId: string expected\";\n                if (message.startDate != null && message.hasOwnProperty(\"startDate\"))\n                    if (!$util.isString(message.startDate))\n                        return \"startDate: string expected\";\n                if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                    if (!$util.isString(message.startTime))\n                        return \"startTime: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a TripProperties message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {transit_realtime.TripUpdate.TripProperties} TripProperties\n             */\n            TripProperties.fromObject = function fromObject(object) {\n                if (object instanceof $root.transit_realtime.TripUpdate.TripProperties)\n                    return object;\n                var message = new $root.transit_realtime.TripUpdate.TripProperties();\n                if (object.tripId != null)\n                    message.tripId = String(object.tripId);\n                if (object.startDate != null)\n                    message.startDate = String(object.startDate);\n                if (object.startTime != null)\n                    message.startTime = String(object.startTime);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a TripProperties message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {transit_realtime.TripUpdate.TripProperties} message TripProperties\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            TripProperties.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.tripId = \"\";\n                    object.startDate = \"\";\n                    object.startTime = \"\";\n                }\n                if (message.tripId != null && message.hasOwnProperty(\"tripId\"))\n                    object.tripId = message.tripId;\n                if (message.startDate != null && message.hasOwnProperty(\"startDate\"))\n                    object.startDate = message.startDate;\n                if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                    object.startTime = message.startTime;\n                return object;\n            };\n\n            /**\n             * Converts this TripProperties to JSON.\n             * @function toJSON\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            TripProperties.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for TripProperties\n             * @function getTypeUrl\n             * @memberof transit_realtime.TripUpdate.TripProperties\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            TripProperties.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/transit_realtime.TripUpdate.TripProperties\";\n            };\n\n            return TripProperties;\n        })();\n\n        return TripUpdate;\n    })();\n\n    transit_realtime.VehiclePosition = (function() {\n\n        /**\n         * Properties of a VehiclePosition.\n         * @memberof transit_realtime\n         * @interface IVehiclePosition\n         * @property {transit_realtime.ITripDescriptor|null} [trip] VehiclePosition trip\n         * @property {transit_realtime.IVehicleDescriptor|null} [vehicle] VehiclePosition vehicle\n         * @property {transit_realtime.IPosition|null} [position] VehiclePosition position\n         * @property {number|null} [currentStopSequence] VehiclePosition currentStopSequence\n         * @property {string|null} [stopId] VehiclePosition stopId\n         * @property {transit_realtime.VehiclePosition.VehicleStopStatus|null} [currentStatus] VehiclePosition currentStatus\n         * @property {number|Long|null} [timestamp] VehiclePosition timestamp\n         * @property {transit_realtime.VehiclePosition.CongestionLevel|null} [congestionLevel] VehiclePosition congestionLevel\n         * @property {transit_realtime.VehiclePosition.OccupancyStatus|null} [occupancyStatus] VehiclePosition occupancyStatus\n         * @property {number|null} [occupancyPercentage] VehiclePosition occupancyPercentage\n         * @property {Array.<transit_realtime.VehiclePosition.ICarriageDetails>|null} [multiCarriageDetails] VehiclePosition multiCarriageDetails\n         */\n\n        /**\n         * Constructs a new VehiclePosition.\n         * @memberof transit_realtime\n         * @classdesc Represents a VehiclePosition.\n         * @implements IVehiclePosition\n         * @constructor\n         * @param {transit_realtime.IVehiclePosition=} [properties] Properties to set\n         */\n        function VehiclePosition(properties) {\n            this.multiCarriageDetails = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * VehiclePosition trip.\n         * @member {transit_realtime.ITripDescriptor|null|undefined} trip\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.trip = null;\n\n        /**\n         * VehiclePosition vehicle.\n         * @member {transit_realtime.IVehicleDescriptor|null|undefined} vehicle\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.vehicle = null;\n\n        /**\n         * VehiclePosition position.\n         * @member {transit_realtime.IPosition|null|undefined} position\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.position = null;\n\n        /**\n         * VehiclePosition currentStopSequence.\n         * @member {number} currentStopSequence\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.currentStopSequence = 0;\n\n        /**\n         * VehiclePosition stopId.\n         * @member {string} stopId\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.stopId = \"\";\n\n        /**\n         * VehiclePosition currentStatus.\n         * @member {transit_realtime.VehiclePosition.VehicleStopStatus} currentStatus\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.currentStatus = 2;\n\n        /**\n         * VehiclePosition timestamp.\n         * @member {number|Long} timestamp\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * VehiclePosition congestionLevel.\n         * @member {transit_realtime.VehiclePosition.CongestionLevel} congestionLevel\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.congestionLevel = 0;\n\n        /**\n         * VehiclePosition occupancyStatus.\n         * @member {transit_realtime.VehiclePosition.OccupancyStatus} occupancyStatus\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.occupancyStatus = 0;\n\n        /**\n         * VehiclePosition occupancyPercentage.\n         * @member {number} occupancyPercentage\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.occupancyPercentage = 0;\n\n        /**\n         * VehiclePosition multiCarriageDetails.\n         * @member {Array.<transit_realtime.VehiclePosition.ICarriageDetails>} multiCarriageDetails\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         */\n        VehiclePosition.prototype.multiCarriageDetails = $util.emptyArray;\n\n        /**\n         * Creates a new VehiclePosition instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {transit_realtime.IVehiclePosition=} [properties] Properties to set\n         * @returns {transit_realtime.VehiclePosition} VehiclePosition instance\n         */\n        VehiclePosition.create = function create(properties) {\n            return new VehiclePosition(properties);\n        };\n\n        /**\n         * Encodes the specified VehiclePosition message. Does not implicitly {@link transit_realtime.VehiclePosition.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {transit_realtime.IVehiclePosition} message VehiclePosition message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VehiclePosition.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.trip != null && Object.hasOwnProperty.call(message, \"trip\"))\n                $root.transit_realtime.TripDescriptor.encode(message.trip, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.position != null && Object.hasOwnProperty.call(message, \"position\"))\n                $root.transit_realtime.Position.encode(message.position, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.currentStopSequence != null && Object.hasOwnProperty.call(message, \"currentStopSequence\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.currentStopSequence);\n            if (message.currentStatus != null && Object.hasOwnProperty.call(message, \"currentStatus\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.currentStatus);\n            if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.timestamp);\n            if (message.congestionLevel != null && Object.hasOwnProperty.call(message, \"congestionLevel\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.congestionLevel);\n            if (message.stopId != null && Object.hasOwnProperty.call(message, \"stopId\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.stopId);\n            if (message.vehicle != null && Object.hasOwnProperty.call(message, \"vehicle\"))\n                $root.transit_realtime.VehicleDescriptor.encode(message.vehicle, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.occupancyStatus != null && Object.hasOwnProperty.call(message, \"occupancyStatus\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.occupancyStatus);\n            if (message.occupancyPercentage != null && Object.hasOwnProperty.call(message, \"occupancyPercentage\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.occupancyPercentage);\n            if (message.multiCarriageDetails != null && message.multiCarriageDetails.length)\n                for (var i = 0; i < message.multiCarriageDetails.length; ++i)\n                    $root.transit_realtime.VehiclePosition.CarriageDetails.encode(message.multiCarriageDetails[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified VehiclePosition message, length delimited. Does not implicitly {@link transit_realtime.VehiclePosition.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {transit_realtime.IVehiclePosition} message VehiclePosition message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VehiclePosition.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a VehiclePosition message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.VehiclePosition} VehiclePosition\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VehiclePosition.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.VehiclePosition();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.trip = $root.transit_realtime.TripDescriptor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.vehicle = $root.transit_realtime.VehicleDescriptor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.position = $root.transit_realtime.Position.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.currentStopSequence = reader.uint32();\n                        break;\n                    }\n                case 7: {\n                        message.stopId = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.currentStatus = reader.int32();\n                        break;\n                    }\n                case 5: {\n                        message.timestamp = reader.uint64();\n                        break;\n                    }\n                case 6: {\n                        message.congestionLevel = reader.int32();\n                        break;\n                    }\n                case 9: {\n                        message.occupancyStatus = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        message.occupancyPercentage = reader.uint32();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.multiCarriageDetails && message.multiCarriageDetails.length))\n                            message.multiCarriageDetails = [];\n                        message.multiCarriageDetails.push($root.transit_realtime.VehiclePosition.CarriageDetails.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a VehiclePosition message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.VehiclePosition} VehiclePosition\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VehiclePosition.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a VehiclePosition message.\n         * @function verify\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        VehiclePosition.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.trip != null && message.hasOwnProperty(\"trip\")) {\n                var error = $root.transit_realtime.TripDescriptor.verify(message.trip);\n                if (error)\n                    return \"trip.\" + error;\n            }\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\")) {\n                var error = $root.transit_realtime.VehicleDescriptor.verify(message.vehicle);\n                if (error)\n                    return \"vehicle.\" + error;\n            }\n            if (message.position != null && message.hasOwnProperty(\"position\")) {\n                var error = $root.transit_realtime.Position.verify(message.position);\n                if (error)\n                    return \"position.\" + error;\n            }\n            if (message.currentStopSequence != null && message.hasOwnProperty(\"currentStopSequence\"))\n                if (!$util.isInteger(message.currentStopSequence))\n                    return \"currentStopSequence: integer expected\";\n            if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                if (!$util.isString(message.stopId))\n                    return \"stopId: string expected\";\n            if (message.currentStatus != null && message.hasOwnProperty(\"currentStatus\"))\n                switch (message.currentStatus) {\n                default:\n                    return \"currentStatus: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.congestionLevel != null && message.hasOwnProperty(\"congestionLevel\"))\n                switch (message.congestionLevel) {\n                default:\n                    return \"congestionLevel: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    break;\n                }\n            if (message.occupancyStatus != null && message.hasOwnProperty(\"occupancyStatus\"))\n                switch (message.occupancyStatus) {\n                default:\n                    return \"occupancyStatus: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    break;\n                }\n            if (message.occupancyPercentage != null && message.hasOwnProperty(\"occupancyPercentage\"))\n                if (!$util.isInteger(message.occupancyPercentage))\n                    return \"occupancyPercentage: integer expected\";\n            if (message.multiCarriageDetails != null && message.hasOwnProperty(\"multiCarriageDetails\")) {\n                if (!Array.isArray(message.multiCarriageDetails))\n                    return \"multiCarriageDetails: array expected\";\n                for (var i = 0; i < message.multiCarriageDetails.length; ++i) {\n                    var error = $root.transit_realtime.VehiclePosition.CarriageDetails.verify(message.multiCarriageDetails[i]);\n                    if (error)\n                        return \"multiCarriageDetails.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a VehiclePosition message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.VehiclePosition} VehiclePosition\n         */\n        VehiclePosition.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.VehiclePosition)\n                return object;\n            var message = new $root.transit_realtime.VehiclePosition();\n            if (object.trip != null) {\n                if (typeof object.trip !== \"object\")\n                    throw TypeError(\".transit_realtime.VehiclePosition.trip: object expected\");\n                message.trip = $root.transit_realtime.TripDescriptor.fromObject(object.trip);\n            }\n            if (object.vehicle != null) {\n                if (typeof object.vehicle !== \"object\")\n                    throw TypeError(\".transit_realtime.VehiclePosition.vehicle: object expected\");\n                message.vehicle = $root.transit_realtime.VehicleDescriptor.fromObject(object.vehicle);\n            }\n            if (object.position != null) {\n                if (typeof object.position !== \"object\")\n                    throw TypeError(\".transit_realtime.VehiclePosition.position: object expected\");\n                message.position = $root.transit_realtime.Position.fromObject(object.position);\n            }\n            if (object.currentStopSequence != null)\n                message.currentStopSequence = object.currentStopSequence >>> 0;\n            if (object.stopId != null)\n                message.stopId = String(object.stopId);\n            switch (object.currentStatus) {\n            case \"INCOMING_AT\":\n            case 0:\n                message.currentStatus = 0;\n                break;\n            case \"STOPPED_AT\":\n            case 1:\n                message.currentStatus = 1;\n                break;\n            default:\n                if (typeof object.currentStatus === \"number\") {\n                    message.currentStatus = object.currentStatus;\n                    break;\n                }\n                break;\n            case \"IN_TRANSIT_TO\":\n            case 2:\n                message.currentStatus = 2;\n                break;\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);\n            switch (object.congestionLevel) {\n            default:\n                if (typeof object.congestionLevel === \"number\") {\n                    message.congestionLevel = object.congestionLevel;\n                    break;\n                }\n                break;\n            case \"UNKNOWN_CONGESTION_LEVEL\":\n            case 0:\n                message.congestionLevel = 0;\n                break;\n            case \"RUNNING_SMOOTHLY\":\n            case 1:\n                message.congestionLevel = 1;\n                break;\n            case \"STOP_AND_GO\":\n            case 2:\n                message.congestionLevel = 2;\n                break;\n            case \"CONGESTION\":\n            case 3:\n                message.congestionLevel = 3;\n                break;\n            case \"SEVERE_CONGESTION\":\n            case 4:\n                message.congestionLevel = 4;\n                break;\n            }\n            switch (object.occupancyStatus) {\n            default:\n                if (typeof object.occupancyStatus === \"number\") {\n                    message.occupancyStatus = object.occupancyStatus;\n                    break;\n                }\n                break;\n            case \"EMPTY\":\n            case 0:\n                message.occupancyStatus = 0;\n                break;\n            case \"MANY_SEATS_AVAILABLE\":\n            case 1:\n                message.occupancyStatus = 1;\n                break;\n            case \"FEW_SEATS_AVAILABLE\":\n            case 2:\n                message.occupancyStatus = 2;\n                break;\n            case \"STANDING_ROOM_ONLY\":\n            case 3:\n                message.occupancyStatus = 3;\n                break;\n            case \"CRUSHED_STANDING_ROOM_ONLY\":\n            case 4:\n                message.occupancyStatus = 4;\n                break;\n            case \"FULL\":\n            case 5:\n                message.occupancyStatus = 5;\n                break;\n            case \"NOT_ACCEPTING_PASSENGERS\":\n            case 6:\n                message.occupancyStatus = 6;\n                break;\n            case \"NO_DATA_AVAILABLE\":\n            case 7:\n                message.occupancyStatus = 7;\n                break;\n            case \"NOT_BOARDABLE\":\n            case 8:\n                message.occupancyStatus = 8;\n                break;\n            }\n            if (object.occupancyPercentage != null)\n                message.occupancyPercentage = object.occupancyPercentage >>> 0;\n            if (object.multiCarriageDetails) {\n                if (!Array.isArray(object.multiCarriageDetails))\n                    throw TypeError(\".transit_realtime.VehiclePosition.multiCarriageDetails: array expected\");\n                message.multiCarriageDetails = [];\n                for (var i = 0; i < object.multiCarriageDetails.length; ++i) {\n                    if (typeof object.multiCarriageDetails[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.VehiclePosition.multiCarriageDetails: object expected\");\n                    message.multiCarriageDetails[i] = $root.transit_realtime.VehiclePosition.CarriageDetails.fromObject(object.multiCarriageDetails[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a VehiclePosition message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {transit_realtime.VehiclePosition} message VehiclePosition\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        VehiclePosition.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.multiCarriageDetails = [];\n            if (options.defaults) {\n                object.trip = null;\n                object.position = null;\n                object.currentStopSequence = 0;\n                object.currentStatus = options.enums === String ? \"IN_TRANSIT_TO\" : 2;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                object.congestionLevel = options.enums === String ? \"UNKNOWN_CONGESTION_LEVEL\" : 0;\n                object.stopId = \"\";\n                object.vehicle = null;\n                object.occupancyStatus = options.enums === String ? \"EMPTY\" : 0;\n                object.occupancyPercentage = 0;\n            }\n            if (message.trip != null && message.hasOwnProperty(\"trip\"))\n                object.trip = $root.transit_realtime.TripDescriptor.toObject(message.trip, options);\n            if (message.position != null && message.hasOwnProperty(\"position\"))\n                object.position = $root.transit_realtime.Position.toObject(message.position, options);\n            if (message.currentStopSequence != null && message.hasOwnProperty(\"currentStopSequence\"))\n                object.currentStopSequence = message.currentStopSequence;\n            if (message.currentStatus != null && message.hasOwnProperty(\"currentStatus\"))\n                object.currentStatus = options.enums === String ? $root.transit_realtime.VehiclePosition.VehicleStopStatus[message.currentStatus] === undefined ? message.currentStatus : $root.transit_realtime.VehiclePosition.VehicleStopStatus[message.currentStatus] : message.currentStatus;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;\n            if (message.congestionLevel != null && message.hasOwnProperty(\"congestionLevel\"))\n                object.congestionLevel = options.enums === String ? $root.transit_realtime.VehiclePosition.CongestionLevel[message.congestionLevel] === undefined ? message.congestionLevel : $root.transit_realtime.VehiclePosition.CongestionLevel[message.congestionLevel] : message.congestionLevel;\n            if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                object.stopId = message.stopId;\n            if (message.vehicle != null && message.hasOwnProperty(\"vehicle\"))\n                object.vehicle = $root.transit_realtime.VehicleDescriptor.toObject(message.vehicle, options);\n            if (message.occupancyStatus != null && message.hasOwnProperty(\"occupancyStatus\"))\n                object.occupancyStatus = options.enums === String ? $root.transit_realtime.VehiclePosition.OccupancyStatus[message.occupancyStatus] === undefined ? message.occupancyStatus : $root.transit_realtime.VehiclePosition.OccupancyStatus[message.occupancyStatus] : message.occupancyStatus;\n            if (message.occupancyPercentage != null && message.hasOwnProperty(\"occupancyPercentage\"))\n                object.occupancyPercentage = message.occupancyPercentage;\n            if (message.multiCarriageDetails && message.multiCarriageDetails.length) {\n                object.multiCarriageDetails = [];\n                for (var j = 0; j < message.multiCarriageDetails.length; ++j)\n                    object.multiCarriageDetails[j] = $root.transit_realtime.VehiclePosition.CarriageDetails.toObject(message.multiCarriageDetails[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this VehiclePosition to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.VehiclePosition\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        VehiclePosition.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for VehiclePosition\n         * @function getTypeUrl\n         * @memberof transit_realtime.VehiclePosition\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        VehiclePosition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.VehiclePosition\";\n        };\n\n        /**\n         * VehicleStopStatus enum.\n         * @name transit_realtime.VehiclePosition.VehicleStopStatus\n         * @enum {number}\n         * @property {number} INCOMING_AT=0 INCOMING_AT value\n         * @property {number} STOPPED_AT=1 STOPPED_AT value\n         * @property {number} IN_TRANSIT_TO=2 IN_TRANSIT_TO value\n         */\n        VehiclePosition.VehicleStopStatus = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"INCOMING_AT\"] = 0;\n            values[valuesById[1] = \"STOPPED_AT\"] = 1;\n            values[valuesById[2] = \"IN_TRANSIT_TO\"] = 2;\n            return values;\n        })();\n\n        /**\n         * CongestionLevel enum.\n         * @name transit_realtime.VehiclePosition.CongestionLevel\n         * @enum {number}\n         * @property {number} UNKNOWN_CONGESTION_LEVEL=0 UNKNOWN_CONGESTION_LEVEL value\n         * @property {number} RUNNING_SMOOTHLY=1 RUNNING_SMOOTHLY value\n         * @property {number} STOP_AND_GO=2 STOP_AND_GO value\n         * @property {number} CONGESTION=3 CONGESTION value\n         * @property {number} SEVERE_CONGESTION=4 SEVERE_CONGESTION value\n         */\n        VehiclePosition.CongestionLevel = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN_CONGESTION_LEVEL\"] = 0;\n            values[valuesById[1] = \"RUNNING_SMOOTHLY\"] = 1;\n            values[valuesById[2] = \"STOP_AND_GO\"] = 2;\n            values[valuesById[3] = \"CONGESTION\"] = 3;\n            values[valuesById[4] = \"SEVERE_CONGESTION\"] = 4;\n            return values;\n        })();\n\n        /**\n         * OccupancyStatus enum.\n         * @name transit_realtime.VehiclePosition.OccupancyStatus\n         * @enum {number}\n         * @property {number} EMPTY=0 EMPTY value\n         * @property {number} MANY_SEATS_AVAILABLE=1 MANY_SEATS_AVAILABLE value\n         * @property {number} FEW_SEATS_AVAILABLE=2 FEW_SEATS_AVAILABLE value\n         * @property {number} STANDING_ROOM_ONLY=3 STANDING_ROOM_ONLY value\n         * @property {number} CRUSHED_STANDING_ROOM_ONLY=4 CRUSHED_STANDING_ROOM_ONLY value\n         * @property {number} FULL=5 FULL value\n         * @property {number} NOT_ACCEPTING_PASSENGERS=6 NOT_ACCEPTING_PASSENGERS value\n         * @property {number} NO_DATA_AVAILABLE=7 NO_DATA_AVAILABLE value\n         * @property {number} NOT_BOARDABLE=8 NOT_BOARDABLE value\n         */\n        VehiclePosition.OccupancyStatus = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"EMPTY\"] = 0;\n            values[valuesById[1] = \"MANY_SEATS_AVAILABLE\"] = 1;\n            values[valuesById[2] = \"FEW_SEATS_AVAILABLE\"] = 2;\n            values[valuesById[3] = \"STANDING_ROOM_ONLY\"] = 3;\n            values[valuesById[4] = \"CRUSHED_STANDING_ROOM_ONLY\"] = 4;\n            values[valuesById[5] = \"FULL\"] = 5;\n            values[valuesById[6] = \"NOT_ACCEPTING_PASSENGERS\"] = 6;\n            values[valuesById[7] = \"NO_DATA_AVAILABLE\"] = 7;\n            values[valuesById[8] = \"NOT_BOARDABLE\"] = 8;\n            return values;\n        })();\n\n        VehiclePosition.CarriageDetails = (function() {\n\n            /**\n             * Properties of a CarriageDetails.\n             * @memberof transit_realtime.VehiclePosition\n             * @interface ICarriageDetails\n             * @property {string|null} [id] CarriageDetails id\n             * @property {string|null} [label] CarriageDetails label\n             * @property {transit_realtime.VehiclePosition.OccupancyStatus|null} [occupancyStatus] CarriageDetails occupancyStatus\n             * @property {number|null} [occupancyPercentage] CarriageDetails occupancyPercentage\n             * @property {number|null} [carriageSequence] CarriageDetails carriageSequence\n             */\n\n            /**\n             * Constructs a new CarriageDetails.\n             * @memberof transit_realtime.VehiclePosition\n             * @classdesc Represents a CarriageDetails.\n             * @implements ICarriageDetails\n             * @constructor\n             * @param {transit_realtime.VehiclePosition.ICarriageDetails=} [properties] Properties to set\n             */\n            function CarriageDetails(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * CarriageDetails id.\n             * @member {string} id\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             */\n            CarriageDetails.prototype.id = \"\";\n\n            /**\n             * CarriageDetails label.\n             * @member {string} label\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             */\n            CarriageDetails.prototype.label = \"\";\n\n            /**\n             * CarriageDetails occupancyStatus.\n             * @member {transit_realtime.VehiclePosition.OccupancyStatus} occupancyStatus\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             */\n            CarriageDetails.prototype.occupancyStatus = 7;\n\n            /**\n             * CarriageDetails occupancyPercentage.\n             * @member {number} occupancyPercentage\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             */\n            CarriageDetails.prototype.occupancyPercentage = -1;\n\n            /**\n             * CarriageDetails carriageSequence.\n             * @member {number} carriageSequence\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             */\n            CarriageDetails.prototype.carriageSequence = 0;\n\n            /**\n             * Creates a new CarriageDetails instance using the specified properties.\n             * @function create\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {transit_realtime.VehiclePosition.ICarriageDetails=} [properties] Properties to set\n             * @returns {transit_realtime.VehiclePosition.CarriageDetails} CarriageDetails instance\n             */\n            CarriageDetails.create = function create(properties) {\n                return new CarriageDetails(properties);\n            };\n\n            /**\n             * Encodes the specified CarriageDetails message. Does not implicitly {@link transit_realtime.VehiclePosition.CarriageDetails.verify|verify} messages.\n             * @function encode\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {transit_realtime.VehiclePosition.ICarriageDetails} message CarriageDetails message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CarriageDetails.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n                if (message.occupancyStatus != null && Object.hasOwnProperty.call(message, \"occupancyStatus\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.occupancyStatus);\n                if (message.occupancyPercentage != null && Object.hasOwnProperty.call(message, \"occupancyPercentage\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.occupancyPercentage);\n                if (message.carriageSequence != null && Object.hasOwnProperty.call(message, \"carriageSequence\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.carriageSequence);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified CarriageDetails message, length delimited. Does not implicitly {@link transit_realtime.VehiclePosition.CarriageDetails.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {transit_realtime.VehiclePosition.ICarriageDetails} message CarriageDetails message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CarriageDetails.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a CarriageDetails message from the specified reader or buffer.\n             * @function decode\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {transit_realtime.VehiclePosition.CarriageDetails} CarriageDetails\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CarriageDetails.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.VehiclePosition.CarriageDetails();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.label = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.occupancyStatus = reader.int32();\n                            break;\n                        }\n                    case 4: {\n                            message.occupancyPercentage = reader.int32();\n                            break;\n                        }\n                    case 5: {\n                            message.carriageSequence = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a CarriageDetails message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {transit_realtime.VehiclePosition.CarriageDetails} CarriageDetails\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CarriageDetails.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a CarriageDetails message.\n             * @function verify\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            CarriageDetails.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    if (!$util.isString(message.label))\n                        return \"label: string expected\";\n                if (message.occupancyStatus != null && message.hasOwnProperty(\"occupancyStatus\"))\n                    switch (message.occupancyStatus) {\n                    default:\n                        return \"occupancyStatus: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                        break;\n                    }\n                if (message.occupancyPercentage != null && message.hasOwnProperty(\"occupancyPercentage\"))\n                    if (!$util.isInteger(message.occupancyPercentage))\n                        return \"occupancyPercentage: integer expected\";\n                if (message.carriageSequence != null && message.hasOwnProperty(\"carriageSequence\"))\n                    if (!$util.isInteger(message.carriageSequence))\n                        return \"carriageSequence: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a CarriageDetails message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {transit_realtime.VehiclePosition.CarriageDetails} CarriageDetails\n             */\n            CarriageDetails.fromObject = function fromObject(object) {\n                if (object instanceof $root.transit_realtime.VehiclePosition.CarriageDetails)\n                    return object;\n                var message = new $root.transit_realtime.VehiclePosition.CarriageDetails();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.label != null)\n                    message.label = String(object.label);\n                switch (object.occupancyStatus) {\n                case \"EMPTY\":\n                case 0:\n                    message.occupancyStatus = 0;\n                    break;\n                case \"MANY_SEATS_AVAILABLE\":\n                case 1:\n                    message.occupancyStatus = 1;\n                    break;\n                case \"FEW_SEATS_AVAILABLE\":\n                case 2:\n                    message.occupancyStatus = 2;\n                    break;\n                case \"STANDING_ROOM_ONLY\":\n                case 3:\n                    message.occupancyStatus = 3;\n                    break;\n                case \"CRUSHED_STANDING_ROOM_ONLY\":\n                case 4:\n                    message.occupancyStatus = 4;\n                    break;\n                case \"FULL\":\n                case 5:\n                    message.occupancyStatus = 5;\n                    break;\n                case \"NOT_ACCEPTING_PASSENGERS\":\n                case 6:\n                    message.occupancyStatus = 6;\n                    break;\n                default:\n                    if (typeof object.occupancyStatus === \"number\") {\n                        message.occupancyStatus = object.occupancyStatus;\n                        break;\n                    }\n                    break;\n                case \"NO_DATA_AVAILABLE\":\n                case 7:\n                    message.occupancyStatus = 7;\n                    break;\n                case \"NOT_BOARDABLE\":\n                case 8:\n                    message.occupancyStatus = 8;\n                    break;\n                }\n                if (object.occupancyPercentage != null)\n                    message.occupancyPercentage = object.occupancyPercentage | 0;\n                if (object.carriageSequence != null)\n                    message.carriageSequence = object.carriageSequence >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a CarriageDetails message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {transit_realtime.VehiclePosition.CarriageDetails} message CarriageDetails\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            CarriageDetails.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.label = \"\";\n                    object.occupancyStatus = options.enums === String ? \"NO_DATA_AVAILABLE\" : 7;\n                    object.occupancyPercentage = -1;\n                    object.carriageSequence = 0;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = message.label;\n                if (message.occupancyStatus != null && message.hasOwnProperty(\"occupancyStatus\"))\n                    object.occupancyStatus = options.enums === String ? $root.transit_realtime.VehiclePosition.OccupancyStatus[message.occupancyStatus] === undefined ? message.occupancyStatus : $root.transit_realtime.VehiclePosition.OccupancyStatus[message.occupancyStatus] : message.occupancyStatus;\n                if (message.occupancyPercentage != null && message.hasOwnProperty(\"occupancyPercentage\"))\n                    object.occupancyPercentage = message.occupancyPercentage;\n                if (message.carriageSequence != null && message.hasOwnProperty(\"carriageSequence\"))\n                    object.carriageSequence = message.carriageSequence;\n                return object;\n            };\n\n            /**\n             * Converts this CarriageDetails to JSON.\n             * @function toJSON\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            CarriageDetails.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for CarriageDetails\n             * @function getTypeUrl\n             * @memberof transit_realtime.VehiclePosition.CarriageDetails\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            CarriageDetails.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/transit_realtime.VehiclePosition.CarriageDetails\";\n            };\n\n            return CarriageDetails;\n        })();\n\n        return VehiclePosition;\n    })();\n\n    transit_realtime.Alert = (function() {\n\n        /**\n         * Properties of an Alert.\n         * @memberof transit_realtime\n         * @interface IAlert\n         * @property {Array.<transit_realtime.ITimeRange>|null} [activePeriod] Alert activePeriod\n         * @property {Array.<transit_realtime.IEntitySelector>|null} [informedEntity] Alert informedEntity\n         * @property {transit_realtime.Alert.Cause|null} [cause] Alert cause\n         * @property {transit_realtime.Alert.Effect|null} [effect] Alert effect\n         * @property {transit_realtime.ITranslatedString|null} [url] Alert url\n         * @property {transit_realtime.ITranslatedString|null} [headerText] Alert headerText\n         * @property {transit_realtime.ITranslatedString|null} [descriptionText] Alert descriptionText\n         * @property {transit_realtime.ITranslatedString|null} [ttsHeaderText] Alert ttsHeaderText\n         * @property {transit_realtime.ITranslatedString|null} [ttsDescriptionText] Alert ttsDescriptionText\n         * @property {transit_realtime.Alert.SeverityLevel|null} [severityLevel] Alert severityLevel\n         */\n\n        /**\n         * Constructs a new Alert.\n         * @memberof transit_realtime\n         * @classdesc Represents an Alert.\n         * @implements IAlert\n         * @constructor\n         * @param {transit_realtime.IAlert=} [properties] Properties to set\n         */\n        function Alert(properties) {\n            this.activePeriod = [];\n            this.informedEntity = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Alert activePeriod.\n         * @member {Array.<transit_realtime.ITimeRange>} activePeriod\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.activePeriod = $util.emptyArray;\n\n        /**\n         * Alert informedEntity.\n         * @member {Array.<transit_realtime.IEntitySelector>} informedEntity\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.informedEntity = $util.emptyArray;\n\n        /**\n         * Alert cause.\n         * @member {transit_realtime.Alert.Cause} cause\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.cause = 1;\n\n        /**\n         * Alert effect.\n         * @member {transit_realtime.Alert.Effect} effect\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.effect = 8;\n\n        /**\n         * Alert url.\n         * @member {transit_realtime.ITranslatedString|null|undefined} url\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.url = null;\n\n        /**\n         * Alert headerText.\n         * @member {transit_realtime.ITranslatedString|null|undefined} headerText\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.headerText = null;\n\n        /**\n         * Alert descriptionText.\n         * @member {transit_realtime.ITranslatedString|null|undefined} descriptionText\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.descriptionText = null;\n\n        /**\n         * Alert ttsHeaderText.\n         * @member {transit_realtime.ITranslatedString|null|undefined} ttsHeaderText\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.ttsHeaderText = null;\n\n        /**\n         * Alert ttsDescriptionText.\n         * @member {transit_realtime.ITranslatedString|null|undefined} ttsDescriptionText\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.ttsDescriptionText = null;\n\n        /**\n         * Alert severityLevel.\n         * @member {transit_realtime.Alert.SeverityLevel} severityLevel\n         * @memberof transit_realtime.Alert\n         * @instance\n         */\n        Alert.prototype.severityLevel = 1;\n\n        /**\n         * Creates a new Alert instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {transit_realtime.IAlert=} [properties] Properties to set\n         * @returns {transit_realtime.Alert} Alert instance\n         */\n        Alert.create = function create(properties) {\n            return new Alert(properties);\n        };\n\n        /**\n         * Encodes the specified Alert message. Does not implicitly {@link transit_realtime.Alert.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {transit_realtime.IAlert} message Alert message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Alert.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.activePeriod != null && message.activePeriod.length)\n                for (var i = 0; i < message.activePeriod.length; ++i)\n                    $root.transit_realtime.TimeRange.encode(message.activePeriod[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.informedEntity != null && message.informedEntity.length)\n                for (var i = 0; i < message.informedEntity.length; ++i)\n                    $root.transit_realtime.EntitySelector.encode(message.informedEntity[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.cause != null && Object.hasOwnProperty.call(message, \"cause\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cause);\n            if (message.effect != null && Object.hasOwnProperty.call(message, \"effect\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.effect);\n            if (message.url != null && Object.hasOwnProperty.call(message, \"url\"))\n                $root.transit_realtime.TranslatedString.encode(message.url, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.headerText != null && Object.hasOwnProperty.call(message, \"headerText\"))\n                $root.transit_realtime.TranslatedString.encode(message.headerText, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.descriptionText != null && Object.hasOwnProperty.call(message, \"descriptionText\"))\n                $root.transit_realtime.TranslatedString.encode(message.descriptionText, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.ttsHeaderText != null && Object.hasOwnProperty.call(message, \"ttsHeaderText\"))\n                $root.transit_realtime.TranslatedString.encode(message.ttsHeaderText, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.ttsDescriptionText != null && Object.hasOwnProperty.call(message, \"ttsDescriptionText\"))\n                $root.transit_realtime.TranslatedString.encode(message.ttsDescriptionText, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.severityLevel != null && Object.hasOwnProperty.call(message, \"severityLevel\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.severityLevel);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Alert message, length delimited. Does not implicitly {@link transit_realtime.Alert.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {transit_realtime.IAlert} message Alert message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Alert.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Alert message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.Alert} Alert\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Alert.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.Alert();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.activePeriod && message.activePeriod.length))\n                            message.activePeriod = [];\n                        message.activePeriod.push($root.transit_realtime.TimeRange.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 5: {\n                        if (!(message.informedEntity && message.informedEntity.length))\n                            message.informedEntity = [];\n                        message.informedEntity.push($root.transit_realtime.EntitySelector.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.cause = reader.int32();\n                        break;\n                    }\n                case 7: {\n                        message.effect = reader.int32();\n                        break;\n                    }\n                case 8: {\n                        message.url = $root.transit_realtime.TranslatedString.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 10: {\n                        message.headerText = $root.transit_realtime.TranslatedString.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 11: {\n                        message.descriptionText = $root.transit_realtime.TranslatedString.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 12: {\n                        message.ttsHeaderText = $root.transit_realtime.TranslatedString.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 13: {\n                        message.ttsDescriptionText = $root.transit_realtime.TranslatedString.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.severityLevel = reader.int32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Alert message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.Alert} Alert\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Alert.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Alert message.\n         * @function verify\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Alert.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.activePeriod != null && message.hasOwnProperty(\"activePeriod\")) {\n                if (!Array.isArray(message.activePeriod))\n                    return \"activePeriod: array expected\";\n                for (var i = 0; i < message.activePeriod.length; ++i) {\n                    var error = $root.transit_realtime.TimeRange.verify(message.activePeriod[i]);\n                    if (error)\n                        return \"activePeriod.\" + error;\n                }\n            }\n            if (message.informedEntity != null && message.hasOwnProperty(\"informedEntity\")) {\n                if (!Array.isArray(message.informedEntity))\n                    return \"informedEntity: array expected\";\n                for (var i = 0; i < message.informedEntity.length; ++i) {\n                    var error = $root.transit_realtime.EntitySelector.verify(message.informedEntity[i]);\n                    if (error)\n                        return \"informedEntity.\" + error;\n                }\n            }\n            if (message.cause != null && message.hasOwnProperty(\"cause\"))\n                switch (message.cause) {\n                default:\n                    return \"cause: enum value expected\";\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                    break;\n                }\n            if (message.effect != null && message.hasOwnProperty(\"effect\"))\n                switch (message.effect) {\n                default:\n                    return \"effect: enum value expected\";\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                    break;\n                }\n            if (message.url != null && message.hasOwnProperty(\"url\")) {\n                var error = $root.transit_realtime.TranslatedString.verify(message.url);\n                if (error)\n                    return \"url.\" + error;\n            }\n            if (message.headerText != null && message.hasOwnProperty(\"headerText\")) {\n                var error = $root.transit_realtime.TranslatedString.verify(message.headerText);\n                if (error)\n                    return \"headerText.\" + error;\n            }\n            if (message.descriptionText != null && message.hasOwnProperty(\"descriptionText\")) {\n                var error = $root.transit_realtime.TranslatedString.verify(message.descriptionText);\n                if (error)\n                    return \"descriptionText.\" + error;\n            }\n            if (message.ttsHeaderText != null && message.hasOwnProperty(\"ttsHeaderText\")) {\n                var error = $root.transit_realtime.TranslatedString.verify(message.ttsHeaderText);\n                if (error)\n                    return \"ttsHeaderText.\" + error;\n            }\n            if (message.ttsDescriptionText != null && message.hasOwnProperty(\"ttsDescriptionText\")) {\n                var error = $root.transit_realtime.TranslatedString.verify(message.ttsDescriptionText);\n                if (error)\n                    return \"ttsDescriptionText.\" + error;\n            }\n            if (message.severityLevel != null && message.hasOwnProperty(\"severityLevel\"))\n                switch (message.severityLevel) {\n                default:\n                    return \"severityLevel: enum value expected\";\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates an Alert message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.Alert} Alert\n         */\n        Alert.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.Alert)\n                return object;\n            var message = new $root.transit_realtime.Alert();\n            if (object.activePeriod) {\n                if (!Array.isArray(object.activePeriod))\n                    throw TypeError(\".transit_realtime.Alert.activePeriod: array expected\");\n                message.activePeriod = [];\n                for (var i = 0; i < object.activePeriod.length; ++i) {\n                    if (typeof object.activePeriod[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.Alert.activePeriod: object expected\");\n                    message.activePeriod[i] = $root.transit_realtime.TimeRange.fromObject(object.activePeriod[i]);\n                }\n            }\n            if (object.informedEntity) {\n                if (!Array.isArray(object.informedEntity))\n                    throw TypeError(\".transit_realtime.Alert.informedEntity: array expected\");\n                message.informedEntity = [];\n                for (var i = 0; i < object.informedEntity.length; ++i) {\n                    if (typeof object.informedEntity[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.Alert.informedEntity: object expected\");\n                    message.informedEntity[i] = $root.transit_realtime.EntitySelector.fromObject(object.informedEntity[i]);\n                }\n            }\n            switch (object.cause) {\n            default:\n                if (typeof object.cause === \"number\") {\n                    message.cause = object.cause;\n                    break;\n                }\n                break;\n            case \"UNKNOWN_CAUSE\":\n            case 1:\n                message.cause = 1;\n                break;\n            case \"OTHER_CAUSE\":\n            case 2:\n                message.cause = 2;\n                break;\n            case \"TECHNICAL_PROBLEM\":\n            case 3:\n                message.cause = 3;\n                break;\n            case \"STRIKE\":\n            case 4:\n                message.cause = 4;\n                break;\n            case \"DEMONSTRATION\":\n            case 5:\n                message.cause = 5;\n                break;\n            case \"ACCIDENT\":\n            case 6:\n                message.cause = 6;\n                break;\n            case \"HOLIDAY\":\n            case 7:\n                message.cause = 7;\n                break;\n            case \"WEATHER\":\n            case 8:\n                message.cause = 8;\n                break;\n            case \"MAINTENANCE\":\n            case 9:\n                message.cause = 9;\n                break;\n            case \"CONSTRUCTION\":\n            case 10:\n                message.cause = 10;\n                break;\n            case \"POLICE_ACTIVITY\":\n            case 11:\n                message.cause = 11;\n                break;\n            case \"MEDICAL_EMERGENCY\":\n            case 12:\n                message.cause = 12;\n                break;\n            }\n            switch (object.effect) {\n            case \"NO_SERVICE\":\n            case 1:\n                message.effect = 1;\n                break;\n            case \"REDUCED_SERVICE\":\n            case 2:\n                message.effect = 2;\n                break;\n            case \"SIGNIFICANT_DELAYS\":\n            case 3:\n                message.effect = 3;\n                break;\n            case \"DETOUR\":\n            case 4:\n                message.effect = 4;\n                break;\n            case \"ADDITIONAL_SERVICE\":\n            case 5:\n                message.effect = 5;\n                break;\n            case \"MODIFIED_SERVICE\":\n            case 6:\n                message.effect = 6;\n                break;\n            case \"OTHER_EFFECT\":\n            case 7:\n                message.effect = 7;\n                break;\n            default:\n                if (typeof object.effect === \"number\") {\n                    message.effect = object.effect;\n                    break;\n                }\n                break;\n            case \"UNKNOWN_EFFECT\":\n            case 8:\n                message.effect = 8;\n                break;\n            case \"STOP_MOVED\":\n            case 9:\n                message.effect = 9;\n                break;\n            case \"NO_EFFECT\":\n            case 10:\n                message.effect = 10;\n                break;\n            case \"ACCESSIBILITY_ISSUE\":\n            case 11:\n                message.effect = 11;\n                break;\n            }\n            if (object.url != null) {\n                if (typeof object.url !== \"object\")\n                    throw TypeError(\".transit_realtime.Alert.url: object expected\");\n                message.url = $root.transit_realtime.TranslatedString.fromObject(object.url);\n            }\n            if (object.headerText != null) {\n                if (typeof object.headerText !== \"object\")\n                    throw TypeError(\".transit_realtime.Alert.headerText: object expected\");\n                message.headerText = $root.transit_realtime.TranslatedString.fromObject(object.headerText);\n            }\n            if (object.descriptionText != null) {\n                if (typeof object.descriptionText !== \"object\")\n                    throw TypeError(\".transit_realtime.Alert.descriptionText: object expected\");\n                message.descriptionText = $root.transit_realtime.TranslatedString.fromObject(object.descriptionText);\n            }\n            if (object.ttsHeaderText != null) {\n                if (typeof object.ttsHeaderText !== \"object\")\n                    throw TypeError(\".transit_realtime.Alert.ttsHeaderText: object expected\");\n                message.ttsHeaderText = $root.transit_realtime.TranslatedString.fromObject(object.ttsHeaderText);\n            }\n            if (object.ttsDescriptionText != null) {\n                if (typeof object.ttsDescriptionText !== \"object\")\n                    throw TypeError(\".transit_realtime.Alert.ttsDescriptionText: object expected\");\n                message.ttsDescriptionText = $root.transit_realtime.TranslatedString.fromObject(object.ttsDescriptionText);\n            }\n            switch (object.severityLevel) {\n            default:\n                if (typeof object.severityLevel === \"number\") {\n                    message.severityLevel = object.severityLevel;\n                    break;\n                }\n                break;\n            case \"UNKNOWN_SEVERITY\":\n            case 1:\n                message.severityLevel = 1;\n                break;\n            case \"INFO\":\n            case 2:\n                message.severityLevel = 2;\n                break;\n            case \"WARNING\":\n            case 3:\n                message.severityLevel = 3;\n                break;\n            case \"SEVERE\":\n            case 4:\n                message.severityLevel = 4;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Alert message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {transit_realtime.Alert} message Alert\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Alert.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.activePeriod = [];\n                object.informedEntity = [];\n            }\n            if (options.defaults) {\n                object.cause = options.enums === String ? \"UNKNOWN_CAUSE\" : 1;\n                object.effect = options.enums === String ? \"UNKNOWN_EFFECT\" : 8;\n                object.url = null;\n                object.headerText = null;\n                object.descriptionText = null;\n                object.ttsHeaderText = null;\n                object.ttsDescriptionText = null;\n                object.severityLevel = options.enums === String ? \"UNKNOWN_SEVERITY\" : 1;\n            }\n            if (message.activePeriod && message.activePeriod.length) {\n                object.activePeriod = [];\n                for (var j = 0; j < message.activePeriod.length; ++j)\n                    object.activePeriod[j] = $root.transit_realtime.TimeRange.toObject(message.activePeriod[j], options);\n            }\n            if (message.informedEntity && message.informedEntity.length) {\n                object.informedEntity = [];\n                for (var j = 0; j < message.informedEntity.length; ++j)\n                    object.informedEntity[j] = $root.transit_realtime.EntitySelector.toObject(message.informedEntity[j], options);\n            }\n            if (message.cause != null && message.hasOwnProperty(\"cause\"))\n                object.cause = options.enums === String ? $root.transit_realtime.Alert.Cause[message.cause] === undefined ? message.cause : $root.transit_realtime.Alert.Cause[message.cause] : message.cause;\n            if (message.effect != null && message.hasOwnProperty(\"effect\"))\n                object.effect = options.enums === String ? $root.transit_realtime.Alert.Effect[message.effect] === undefined ? message.effect : $root.transit_realtime.Alert.Effect[message.effect] : message.effect;\n            if (message.url != null && message.hasOwnProperty(\"url\"))\n                object.url = $root.transit_realtime.TranslatedString.toObject(message.url, options);\n            if (message.headerText != null && message.hasOwnProperty(\"headerText\"))\n                object.headerText = $root.transit_realtime.TranslatedString.toObject(message.headerText, options);\n            if (message.descriptionText != null && message.hasOwnProperty(\"descriptionText\"))\n                object.descriptionText = $root.transit_realtime.TranslatedString.toObject(message.descriptionText, options);\n            if (message.ttsHeaderText != null && message.hasOwnProperty(\"ttsHeaderText\"))\n                object.ttsHeaderText = $root.transit_realtime.TranslatedString.toObject(message.ttsHeaderText, options);\n            if (message.ttsDescriptionText != null && message.hasOwnProperty(\"ttsDescriptionText\"))\n                object.ttsDescriptionText = $root.transit_realtime.TranslatedString.toObject(message.ttsDescriptionText, options);\n            if (message.severityLevel != null && message.hasOwnProperty(\"severityLevel\"))\n                object.severityLevel = options.enums === String ? $root.transit_realtime.Alert.SeverityLevel[message.severityLevel] === undefined ? message.severityLevel : $root.transit_realtime.Alert.SeverityLevel[message.severityLevel] : message.severityLevel;\n            return object;\n        };\n\n        /**\n         * Converts this Alert to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.Alert\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Alert.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Alert\n         * @function getTypeUrl\n         * @memberof transit_realtime.Alert\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Alert.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.Alert\";\n        };\n\n        /**\n         * Cause enum.\n         * @name transit_realtime.Alert.Cause\n         * @enum {number}\n         * @property {number} UNKNOWN_CAUSE=1 UNKNOWN_CAUSE value\n         * @property {number} OTHER_CAUSE=2 OTHER_CAUSE value\n         * @property {number} TECHNICAL_PROBLEM=3 TECHNICAL_PROBLEM value\n         * @property {number} STRIKE=4 STRIKE value\n         * @property {number} DEMONSTRATION=5 DEMONSTRATION value\n         * @property {number} ACCIDENT=6 ACCIDENT value\n         * @property {number} HOLIDAY=7 HOLIDAY value\n         * @property {number} WEATHER=8 WEATHER value\n         * @property {number} MAINTENANCE=9 MAINTENANCE value\n         * @property {number} CONSTRUCTION=10 CONSTRUCTION value\n         * @property {number} POLICE_ACTIVITY=11 POLICE_ACTIVITY value\n         * @property {number} MEDICAL_EMERGENCY=12 MEDICAL_EMERGENCY value\n         */\n        Alert.Cause = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[1] = \"UNKNOWN_CAUSE\"] = 1;\n            values[valuesById[2] = \"OTHER_CAUSE\"] = 2;\n            values[valuesById[3] = \"TECHNICAL_PROBLEM\"] = 3;\n            values[valuesById[4] = \"STRIKE\"] = 4;\n            values[valuesById[5] = \"DEMONSTRATION\"] = 5;\n            values[valuesById[6] = \"ACCIDENT\"] = 6;\n            values[valuesById[7] = \"HOLIDAY\"] = 7;\n            values[valuesById[8] = \"WEATHER\"] = 8;\n            values[valuesById[9] = \"MAINTENANCE\"] = 9;\n            values[valuesById[10] = \"CONSTRUCTION\"] = 10;\n            values[valuesById[11] = \"POLICE_ACTIVITY\"] = 11;\n            values[valuesById[12] = \"MEDICAL_EMERGENCY\"] = 12;\n            return values;\n        })();\n\n        /**\n         * Effect enum.\n         * @name transit_realtime.Alert.Effect\n         * @enum {number}\n         * @property {number} NO_SERVICE=1 NO_SERVICE value\n         * @property {number} REDUCED_SERVICE=2 REDUCED_SERVICE value\n         * @property {number} SIGNIFICANT_DELAYS=3 SIGNIFICANT_DELAYS value\n         * @property {number} DETOUR=4 DETOUR value\n         * @property {number} ADDITIONAL_SERVICE=5 ADDITIONAL_SERVICE value\n         * @property {number} MODIFIED_SERVICE=6 MODIFIED_SERVICE value\n         * @property {number} OTHER_EFFECT=7 OTHER_EFFECT value\n         * @property {number} UNKNOWN_EFFECT=8 UNKNOWN_EFFECT value\n         * @property {number} STOP_MOVED=9 STOP_MOVED value\n         * @property {number} NO_EFFECT=10 NO_EFFECT value\n         * @property {number} ACCESSIBILITY_ISSUE=11 ACCESSIBILITY_ISSUE value\n         */\n        Alert.Effect = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[1] = \"NO_SERVICE\"] = 1;\n            values[valuesById[2] = \"REDUCED_SERVICE\"] = 2;\n            values[valuesById[3] = \"SIGNIFICANT_DELAYS\"] = 3;\n            values[valuesById[4] = \"DETOUR\"] = 4;\n            values[valuesById[5] = \"ADDITIONAL_SERVICE\"] = 5;\n            values[valuesById[6] = \"MODIFIED_SERVICE\"] = 6;\n            values[valuesById[7] = \"OTHER_EFFECT\"] = 7;\n            values[valuesById[8] = \"UNKNOWN_EFFECT\"] = 8;\n            values[valuesById[9] = \"STOP_MOVED\"] = 9;\n            values[valuesById[10] = \"NO_EFFECT\"] = 10;\n            values[valuesById[11] = \"ACCESSIBILITY_ISSUE\"] = 11;\n            return values;\n        })();\n\n        /**\n         * SeverityLevel enum.\n         * @name transit_realtime.Alert.SeverityLevel\n         * @enum {number}\n         * @property {number} UNKNOWN_SEVERITY=1 UNKNOWN_SEVERITY value\n         * @property {number} INFO=2 INFO value\n         * @property {number} WARNING=3 WARNING value\n         * @property {number} SEVERE=4 SEVERE value\n         */\n        Alert.SeverityLevel = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[1] = \"UNKNOWN_SEVERITY\"] = 1;\n            values[valuesById[2] = \"INFO\"] = 2;\n            values[valuesById[3] = \"WARNING\"] = 3;\n            values[valuesById[4] = \"SEVERE\"] = 4;\n            return values;\n        })();\n\n        return Alert;\n    })();\n\n    transit_realtime.TimeRange = (function() {\n\n        /**\n         * Properties of a TimeRange.\n         * @memberof transit_realtime\n         * @interface ITimeRange\n         * @property {number|Long|null} [start] TimeRange start\n         * @property {number|Long|null} [end] TimeRange end\n         */\n\n        /**\n         * Constructs a new TimeRange.\n         * @memberof transit_realtime\n         * @classdesc Represents a TimeRange.\n         * @implements ITimeRange\n         * @constructor\n         * @param {transit_realtime.ITimeRange=} [properties] Properties to set\n         */\n        function TimeRange(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TimeRange start.\n         * @member {number|Long} start\n         * @memberof transit_realtime.TimeRange\n         * @instance\n         */\n        TimeRange.prototype.start = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * TimeRange end.\n         * @member {number|Long} end\n         * @memberof transit_realtime.TimeRange\n         * @instance\n         */\n        TimeRange.prototype.end = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new TimeRange instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {transit_realtime.ITimeRange=} [properties] Properties to set\n         * @returns {transit_realtime.TimeRange} TimeRange instance\n         */\n        TimeRange.create = function create(properties) {\n            return new TimeRange(properties);\n        };\n\n        /**\n         * Encodes the specified TimeRange message. Does not implicitly {@link transit_realtime.TimeRange.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {transit_realtime.ITimeRange} message TimeRange message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TimeRange.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.start != null && Object.hasOwnProperty.call(message, \"start\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.start);\n            if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.end);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TimeRange message, length delimited. Does not implicitly {@link transit_realtime.TimeRange.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {transit_realtime.ITimeRange} message TimeRange message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TimeRange.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TimeRange message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.TimeRange} TimeRange\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TimeRange.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TimeRange();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.start = reader.uint64();\n                        break;\n                    }\n                case 2: {\n                        message.end = reader.uint64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TimeRange message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.TimeRange} TimeRange\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TimeRange.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TimeRange message.\n         * @function verify\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TimeRange.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.start != null && message.hasOwnProperty(\"start\"))\n                if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))\n                    return \"start: integer|Long expected\";\n            if (message.end != null && message.hasOwnProperty(\"end\"))\n                if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                    return \"end: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TimeRange message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.TimeRange} TimeRange\n         */\n        TimeRange.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.TimeRange)\n                return object;\n            var message = new $root.transit_realtime.TimeRange();\n            if (object.start != null)\n                if ($util.Long)\n                    (message.start = $util.Long.fromValue(object.start)).unsigned = true;\n                else if (typeof object.start === \"string\")\n                    message.start = parseInt(object.start, 10);\n                else if (typeof object.start === \"number\")\n                    message.start = object.start;\n                else if (typeof object.start === \"object\")\n                    message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber(true);\n            if (object.end != null)\n                if ($util.Long)\n                    (message.end = $util.Long.fromValue(object.end)).unsigned = true;\n                else if (typeof object.end === \"string\")\n                    message.end = parseInt(object.end, 10);\n                else if (typeof object.end === \"number\")\n                    message.end = object.end;\n                else if (typeof object.end === \"object\")\n                    message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TimeRange message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {transit_realtime.TimeRange} message TimeRange\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TimeRange.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.start = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.end = options.longs === String ? \"0\" : 0;\n            }\n            if (message.start != null && message.hasOwnProperty(\"start\"))\n                if (typeof message.start === \"number\")\n                    object.start = options.longs === String ? String(message.start) : message.start;\n                else\n                    object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber(true) : message.start;\n            if (message.end != null && message.hasOwnProperty(\"end\"))\n                if (typeof message.end === \"number\")\n                    object.end = options.longs === String ? String(message.end) : message.end;\n                else\n                    object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber(true) : message.end;\n            return object;\n        };\n\n        /**\n         * Converts this TimeRange to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.TimeRange\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TimeRange.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TimeRange\n         * @function getTypeUrl\n         * @memberof transit_realtime.TimeRange\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TimeRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.TimeRange\";\n        };\n\n        return TimeRange;\n    })();\n\n    transit_realtime.Position = (function() {\n\n        /**\n         * Properties of a Position.\n         * @memberof transit_realtime\n         * @interface IPosition\n         * @property {number} latitude Position latitude\n         * @property {number} longitude Position longitude\n         * @property {number|null} [bearing] Position bearing\n         * @property {number|null} [odometer] Position odometer\n         * @property {number|null} [speed] Position speed\n         */\n\n        /**\n         * Constructs a new Position.\n         * @memberof transit_realtime\n         * @classdesc Represents a Position.\n         * @implements IPosition\n         * @constructor\n         * @param {transit_realtime.IPosition=} [properties] Properties to set\n         */\n        function Position(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Position latitude.\n         * @member {number} latitude\n         * @memberof transit_realtime.Position\n         * @instance\n         */\n        Position.prototype.latitude = 0;\n\n        /**\n         * Position longitude.\n         * @member {number} longitude\n         * @memberof transit_realtime.Position\n         * @instance\n         */\n        Position.prototype.longitude = 0;\n\n        /**\n         * Position bearing.\n         * @member {number} bearing\n         * @memberof transit_realtime.Position\n         * @instance\n         */\n        Position.prototype.bearing = 0;\n\n        /**\n         * Position odometer.\n         * @member {number} odometer\n         * @memberof transit_realtime.Position\n         * @instance\n         */\n        Position.prototype.odometer = 0;\n\n        /**\n         * Position speed.\n         * @member {number} speed\n         * @memberof transit_realtime.Position\n         * @instance\n         */\n        Position.prototype.speed = 0;\n\n        /**\n         * Creates a new Position instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {transit_realtime.IPosition=} [properties] Properties to set\n         * @returns {transit_realtime.Position} Position instance\n         */\n        Position.create = function create(properties) {\n            return new Position(properties);\n        };\n\n        /**\n         * Encodes the specified Position message. Does not implicitly {@link transit_realtime.Position.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {transit_realtime.IPosition} message Position message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Position.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            writer.uint32(/* id 1, wireType 5 =*/13).float(message.latitude);\n            writer.uint32(/* id 2, wireType 5 =*/21).float(message.longitude);\n            if (message.bearing != null && Object.hasOwnProperty.call(message, \"bearing\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.bearing);\n            if (message.odometer != null && Object.hasOwnProperty.call(message, \"odometer\"))\n                writer.uint32(/* id 4, wireType 1 =*/33).double(message.odometer);\n            if (message.speed != null && Object.hasOwnProperty.call(message, \"speed\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.speed);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Position message, length delimited. Does not implicitly {@link transit_realtime.Position.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {transit_realtime.IPosition} message Position message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Position.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Position message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.Position} Position\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Position.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.Position();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.latitude = reader.float();\n                        break;\n                    }\n                case 2: {\n                        message.longitude = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.bearing = reader.float();\n                        break;\n                    }\n                case 4: {\n                        message.odometer = reader.double();\n                        break;\n                    }\n                case 5: {\n                        message.speed = reader.float();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            if (!message.hasOwnProperty(\"latitude\"))\n                throw $util.ProtocolError(\"missing required 'latitude'\", { instance: message });\n            if (!message.hasOwnProperty(\"longitude\"))\n                throw $util.ProtocolError(\"missing required 'longitude'\", { instance: message });\n            return message;\n        };\n\n        /**\n         * Decodes a Position message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.Position} Position\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Position.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Position message.\n         * @function verify\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Position.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (typeof message.latitude !== \"number\")\n                return \"latitude: number expected\";\n            if (typeof message.longitude !== \"number\")\n                return \"longitude: number expected\";\n            if (message.bearing != null && message.hasOwnProperty(\"bearing\"))\n                if (typeof message.bearing !== \"number\")\n                    return \"bearing: number expected\";\n            if (message.odometer != null && message.hasOwnProperty(\"odometer\"))\n                if (typeof message.odometer !== \"number\")\n                    return \"odometer: number expected\";\n            if (message.speed != null && message.hasOwnProperty(\"speed\"))\n                if (typeof message.speed !== \"number\")\n                    return \"speed: number expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Position message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.Position} Position\n         */\n        Position.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.Position)\n                return object;\n            var message = new $root.transit_realtime.Position();\n            if (object.latitude != null)\n                message.latitude = Number(object.latitude);\n            if (object.longitude != null)\n                message.longitude = Number(object.longitude);\n            if (object.bearing != null)\n                message.bearing = Number(object.bearing);\n            if (object.odometer != null)\n                message.odometer = Number(object.odometer);\n            if (object.speed != null)\n                message.speed = Number(object.speed);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Position message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {transit_realtime.Position} message Position\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Position.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.latitude = 0;\n                object.longitude = 0;\n                object.bearing = 0;\n                object.odometer = 0;\n                object.speed = 0;\n            }\n            if (message.latitude != null && message.hasOwnProperty(\"latitude\"))\n                object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;\n            if (message.longitude != null && message.hasOwnProperty(\"longitude\"))\n                object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;\n            if (message.bearing != null && message.hasOwnProperty(\"bearing\"))\n                object.bearing = options.json && !isFinite(message.bearing) ? String(message.bearing) : message.bearing;\n            if (message.odometer != null && message.hasOwnProperty(\"odometer\"))\n                object.odometer = options.json && !isFinite(message.odometer) ? String(message.odometer) : message.odometer;\n            if (message.speed != null && message.hasOwnProperty(\"speed\"))\n                object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;\n            return object;\n        };\n\n        /**\n         * Converts this Position to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.Position\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Position.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Position\n         * @function getTypeUrl\n         * @memberof transit_realtime.Position\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Position.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.Position\";\n        };\n\n        return Position;\n    })();\n\n    transit_realtime.TripDescriptor = (function() {\n\n        /**\n         * Properties of a TripDescriptor.\n         * @memberof transit_realtime\n         * @interface ITripDescriptor\n         * @property {string|null} [tripId] TripDescriptor tripId\n         * @property {string|null} [routeId] TripDescriptor routeId\n         * @property {number|null} [directionId] TripDescriptor directionId\n         * @property {string|null} [startTime] TripDescriptor startTime\n         * @property {string|null} [startDate] TripDescriptor startDate\n         * @property {transit_realtime.TripDescriptor.ScheduleRelationship|null} [scheduleRelationship] TripDescriptor scheduleRelationship\n         */\n\n        /**\n         * Constructs a new TripDescriptor.\n         * @memberof transit_realtime\n         * @classdesc Represents a TripDescriptor.\n         * @implements ITripDescriptor\n         * @constructor\n         * @param {transit_realtime.ITripDescriptor=} [properties] Properties to set\n         */\n        function TripDescriptor(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TripDescriptor tripId.\n         * @member {string} tripId\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.tripId = \"\";\n\n        /**\n         * TripDescriptor routeId.\n         * @member {string} routeId\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.routeId = \"\";\n\n        /**\n         * TripDescriptor directionId.\n         * @member {number} directionId\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.directionId = 0;\n\n        /**\n         * TripDescriptor startTime.\n         * @member {string} startTime\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.startTime = \"\";\n\n        /**\n         * TripDescriptor startDate.\n         * @member {string} startDate\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.startDate = \"\";\n\n        /**\n         * TripDescriptor scheduleRelationship.\n         * @member {transit_realtime.TripDescriptor.ScheduleRelationship} scheduleRelationship\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         */\n        TripDescriptor.prototype.scheduleRelationship = 0;\n\n        /**\n         * Creates a new TripDescriptor instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {transit_realtime.ITripDescriptor=} [properties] Properties to set\n         * @returns {transit_realtime.TripDescriptor} TripDescriptor instance\n         */\n        TripDescriptor.create = function create(properties) {\n            return new TripDescriptor(properties);\n        };\n\n        /**\n         * Encodes the specified TripDescriptor message. Does not implicitly {@link transit_realtime.TripDescriptor.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {transit_realtime.ITripDescriptor} message TripDescriptor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TripDescriptor.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tripId != null && Object.hasOwnProperty.call(message, \"tripId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tripId);\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.startTime);\n            if (message.startDate != null && Object.hasOwnProperty.call(message, \"startDate\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.startDate);\n            if (message.scheduleRelationship != null && Object.hasOwnProperty.call(message, \"scheduleRelationship\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.scheduleRelationship);\n            if (message.routeId != null && Object.hasOwnProperty.call(message, \"routeId\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.routeId);\n            if (message.directionId != null && Object.hasOwnProperty.call(message, \"directionId\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.directionId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TripDescriptor message, length delimited. Does not implicitly {@link transit_realtime.TripDescriptor.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {transit_realtime.ITripDescriptor} message TripDescriptor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TripDescriptor.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TripDescriptor message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.TripDescriptor} TripDescriptor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TripDescriptor.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TripDescriptor();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tripId = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.routeId = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.directionId = reader.uint32();\n                        break;\n                    }\n                case 2: {\n                        message.startTime = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.startDate = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.scheduleRelationship = reader.int32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TripDescriptor message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.TripDescriptor} TripDescriptor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TripDescriptor.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TripDescriptor message.\n         * @function verify\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TripDescriptor.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tripId != null && message.hasOwnProperty(\"tripId\"))\n                if (!$util.isString(message.tripId))\n                    return \"tripId: string expected\";\n            if (message.routeId != null && message.hasOwnProperty(\"routeId\"))\n                if (!$util.isString(message.routeId))\n                    return \"routeId: string expected\";\n            if (message.directionId != null && message.hasOwnProperty(\"directionId\"))\n                if (!$util.isInteger(message.directionId))\n                    return \"directionId: integer expected\";\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isString(message.startTime))\n                    return \"startTime: string expected\";\n            if (message.startDate != null && message.hasOwnProperty(\"startDate\"))\n                if (!$util.isString(message.startDate))\n                    return \"startDate: string expected\";\n            if (message.scheduleRelationship != null && message.hasOwnProperty(\"scheduleRelationship\"))\n                switch (message.scheduleRelationship) {\n                default:\n                    return \"scheduleRelationship: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 5:\n                case 6:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a TripDescriptor message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.TripDescriptor} TripDescriptor\n         */\n        TripDescriptor.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.TripDescriptor)\n                return object;\n            var message = new $root.transit_realtime.TripDescriptor();\n            if (object.tripId != null)\n                message.tripId = String(object.tripId);\n            if (object.routeId != null)\n                message.routeId = String(object.routeId);\n            if (object.directionId != null)\n                message.directionId = object.directionId >>> 0;\n            if (object.startTime != null)\n                message.startTime = String(object.startTime);\n            if (object.startDate != null)\n                message.startDate = String(object.startDate);\n            switch (object.scheduleRelationship) {\n            default:\n                if (typeof object.scheduleRelationship === \"number\") {\n                    message.scheduleRelationship = object.scheduleRelationship;\n                    break;\n                }\n                break;\n            case \"SCHEDULED\":\n            case 0:\n                message.scheduleRelationship = 0;\n                break;\n            case \"ADDED\":\n            case 1:\n                message.scheduleRelationship = 1;\n                break;\n            case \"UNSCHEDULED\":\n            case 2:\n                message.scheduleRelationship = 2;\n                break;\n            case \"CANCELED\":\n            case 3:\n                message.scheduleRelationship = 3;\n                break;\n            case \"REPLACEMENT\":\n            case 5:\n                message.scheduleRelationship = 5;\n                break;\n            case \"DUPLICATED\":\n            case 6:\n                message.scheduleRelationship = 6;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TripDescriptor message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {transit_realtime.TripDescriptor} message TripDescriptor\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TripDescriptor.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.tripId = \"\";\n                object.startTime = \"\";\n                object.startDate = \"\";\n                object.scheduleRelationship = options.enums === String ? \"SCHEDULED\" : 0;\n                object.routeId = \"\";\n                object.directionId = 0;\n            }\n            if (message.tripId != null && message.hasOwnProperty(\"tripId\"))\n                object.tripId = message.tripId;\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                object.startTime = message.startTime;\n            if (message.startDate != null && message.hasOwnProperty(\"startDate\"))\n                object.startDate = message.startDate;\n            if (message.scheduleRelationship != null && message.hasOwnProperty(\"scheduleRelationship\"))\n                object.scheduleRelationship = options.enums === String ? $root.transit_realtime.TripDescriptor.ScheduleRelationship[message.scheduleRelationship] === undefined ? message.scheduleRelationship : $root.transit_realtime.TripDescriptor.ScheduleRelationship[message.scheduleRelationship] : message.scheduleRelationship;\n            if (message.routeId != null && message.hasOwnProperty(\"routeId\"))\n                object.routeId = message.routeId;\n            if (message.directionId != null && message.hasOwnProperty(\"directionId\"))\n                object.directionId = message.directionId;\n            return object;\n        };\n\n        /**\n         * Converts this TripDescriptor to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.TripDescriptor\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TripDescriptor.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TripDescriptor\n         * @function getTypeUrl\n         * @memberof transit_realtime.TripDescriptor\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TripDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.TripDescriptor\";\n        };\n\n        /**\n         * ScheduleRelationship enum.\n         * @name transit_realtime.TripDescriptor.ScheduleRelationship\n         * @enum {number}\n         * @property {number} SCHEDULED=0 SCHEDULED value\n         * @property {number} ADDED=1 ADDED value\n         * @property {number} UNSCHEDULED=2 UNSCHEDULED value\n         * @property {number} CANCELED=3 CANCELED value\n         * @property {number} REPLACEMENT=5 REPLACEMENT value\n         * @property {number} DUPLICATED=6 DUPLICATED value\n         */\n        TripDescriptor.ScheduleRelationship = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"SCHEDULED\"] = 0;\n            values[valuesById[1] = \"ADDED\"] = 1;\n            values[valuesById[2] = \"UNSCHEDULED\"] = 2;\n            values[valuesById[3] = \"CANCELED\"] = 3;\n            values[valuesById[5] = \"REPLACEMENT\"] = 5;\n            values[valuesById[6] = \"DUPLICATED\"] = 6;\n            return values;\n        })();\n\n        return TripDescriptor;\n    })();\n\n    transit_realtime.VehicleDescriptor = (function() {\n\n        /**\n         * Properties of a VehicleDescriptor.\n         * @memberof transit_realtime\n         * @interface IVehicleDescriptor\n         * @property {string|null} [id] VehicleDescriptor id\n         * @property {string|null} [label] VehicleDescriptor label\n         * @property {string|null} [licensePlate] VehicleDescriptor licensePlate\n         */\n\n        /**\n         * Constructs a new VehicleDescriptor.\n         * @memberof transit_realtime\n         * @classdesc Represents a VehicleDescriptor.\n         * @implements IVehicleDescriptor\n         * @constructor\n         * @param {transit_realtime.IVehicleDescriptor=} [properties] Properties to set\n         */\n        function VehicleDescriptor(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * VehicleDescriptor id.\n         * @member {string} id\n         * @memberof transit_realtime.VehicleDescriptor\n         * @instance\n         */\n        VehicleDescriptor.prototype.id = \"\";\n\n        /**\n         * VehicleDescriptor label.\n         * @member {string} label\n         * @memberof transit_realtime.VehicleDescriptor\n         * @instance\n         */\n        VehicleDescriptor.prototype.label = \"\";\n\n        /**\n         * VehicleDescriptor licensePlate.\n         * @member {string} licensePlate\n         * @memberof transit_realtime.VehicleDescriptor\n         * @instance\n         */\n        VehicleDescriptor.prototype.licensePlate = \"\";\n\n        /**\n         * Creates a new VehicleDescriptor instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {transit_realtime.IVehicleDescriptor=} [properties] Properties to set\n         * @returns {transit_realtime.VehicleDescriptor} VehicleDescriptor instance\n         */\n        VehicleDescriptor.create = function create(properties) {\n            return new VehicleDescriptor(properties);\n        };\n\n        /**\n         * Encodes the specified VehicleDescriptor message. Does not implicitly {@link transit_realtime.VehicleDescriptor.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {transit_realtime.IVehicleDescriptor} message VehicleDescriptor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VehicleDescriptor.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n            if (message.licensePlate != null && Object.hasOwnProperty.call(message, \"licensePlate\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.licensePlate);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified VehicleDescriptor message, length delimited. Does not implicitly {@link transit_realtime.VehicleDescriptor.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {transit_realtime.IVehicleDescriptor} message VehicleDescriptor message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VehicleDescriptor.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a VehicleDescriptor message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.VehicleDescriptor} VehicleDescriptor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VehicleDescriptor.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.VehicleDescriptor();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.label = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.licensePlate = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a VehicleDescriptor message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.VehicleDescriptor} VehicleDescriptor\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VehicleDescriptor.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a VehicleDescriptor message.\n         * @function verify\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        VehicleDescriptor.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.label != null && message.hasOwnProperty(\"label\"))\n                if (!$util.isString(message.label))\n                    return \"label: string expected\";\n            if (message.licensePlate != null && message.hasOwnProperty(\"licensePlate\"))\n                if (!$util.isString(message.licensePlate))\n                    return \"licensePlate: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a VehicleDescriptor message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.VehicleDescriptor} VehicleDescriptor\n         */\n        VehicleDescriptor.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.VehicleDescriptor)\n                return object;\n            var message = new $root.transit_realtime.VehicleDescriptor();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.label != null)\n                message.label = String(object.label);\n            if (object.licensePlate != null)\n                message.licensePlate = String(object.licensePlate);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a VehicleDescriptor message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {transit_realtime.VehicleDescriptor} message VehicleDescriptor\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        VehicleDescriptor.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.label = \"\";\n                object.licensePlate = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.label != null && message.hasOwnProperty(\"label\"))\n                object.label = message.label;\n            if (message.licensePlate != null && message.hasOwnProperty(\"licensePlate\"))\n                object.licensePlate = message.licensePlate;\n            return object;\n        };\n\n        /**\n         * Converts this VehicleDescriptor to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.VehicleDescriptor\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        VehicleDescriptor.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for VehicleDescriptor\n         * @function getTypeUrl\n         * @memberof transit_realtime.VehicleDescriptor\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        VehicleDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.VehicleDescriptor\";\n        };\n\n        return VehicleDescriptor;\n    })();\n\n    transit_realtime.EntitySelector = (function() {\n\n        /**\n         * Properties of an EntitySelector.\n         * @memberof transit_realtime\n         * @interface IEntitySelector\n         * @property {string|null} [agencyId] EntitySelector agencyId\n         * @property {string|null} [routeId] EntitySelector routeId\n         * @property {number|null} [routeType] EntitySelector routeType\n         * @property {transit_realtime.ITripDescriptor|null} [trip] EntitySelector trip\n         * @property {string|null} [stopId] EntitySelector stopId\n         * @property {number|null} [directionId] EntitySelector directionId\n         */\n\n        /**\n         * Constructs a new EntitySelector.\n         * @memberof transit_realtime\n         * @classdesc Represents an EntitySelector.\n         * @implements IEntitySelector\n         * @constructor\n         * @param {transit_realtime.IEntitySelector=} [properties] Properties to set\n         */\n        function EntitySelector(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EntitySelector agencyId.\n         * @member {string} agencyId\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.agencyId = \"\";\n\n        /**\n         * EntitySelector routeId.\n         * @member {string} routeId\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.routeId = \"\";\n\n        /**\n         * EntitySelector routeType.\n         * @member {number} routeType\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.routeType = 0;\n\n        /**\n         * EntitySelector trip.\n         * @member {transit_realtime.ITripDescriptor|null|undefined} trip\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.trip = null;\n\n        /**\n         * EntitySelector stopId.\n         * @member {string} stopId\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.stopId = \"\";\n\n        /**\n         * EntitySelector directionId.\n         * @member {number} directionId\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         */\n        EntitySelector.prototype.directionId = 0;\n\n        /**\n         * Creates a new EntitySelector instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {transit_realtime.IEntitySelector=} [properties] Properties to set\n         * @returns {transit_realtime.EntitySelector} EntitySelector instance\n         */\n        EntitySelector.create = function create(properties) {\n            return new EntitySelector(properties);\n        };\n\n        /**\n         * Encodes the specified EntitySelector message. Does not implicitly {@link transit_realtime.EntitySelector.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {transit_realtime.IEntitySelector} message EntitySelector message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EntitySelector.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.agencyId != null && Object.hasOwnProperty.call(message, \"agencyId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.agencyId);\n            if (message.routeId != null && Object.hasOwnProperty.call(message, \"routeId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.routeId);\n            if (message.routeType != null && Object.hasOwnProperty.call(message, \"routeType\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.routeType);\n            if (message.trip != null && Object.hasOwnProperty.call(message, \"trip\"))\n                $root.transit_realtime.TripDescriptor.encode(message.trip, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.stopId != null && Object.hasOwnProperty.call(message, \"stopId\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.stopId);\n            if (message.directionId != null && Object.hasOwnProperty.call(message, \"directionId\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.directionId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EntitySelector message, length delimited. Does not implicitly {@link transit_realtime.EntitySelector.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {transit_realtime.IEntitySelector} message EntitySelector message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EntitySelector.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EntitySelector message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.EntitySelector} EntitySelector\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EntitySelector.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.EntitySelector();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.agencyId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.routeId = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.routeType = reader.int32();\n                        break;\n                    }\n                case 4: {\n                        message.trip = $root.transit_realtime.TripDescriptor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.stopId = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.directionId = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EntitySelector message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.EntitySelector} EntitySelector\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EntitySelector.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EntitySelector message.\n         * @function verify\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EntitySelector.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.agencyId != null && message.hasOwnProperty(\"agencyId\"))\n                if (!$util.isString(message.agencyId))\n                    return \"agencyId: string expected\";\n            if (message.routeId != null && message.hasOwnProperty(\"routeId\"))\n                if (!$util.isString(message.routeId))\n                    return \"routeId: string expected\";\n            if (message.routeType != null && message.hasOwnProperty(\"routeType\"))\n                if (!$util.isInteger(message.routeType))\n                    return \"routeType: integer expected\";\n            if (message.trip != null && message.hasOwnProperty(\"trip\")) {\n                var error = $root.transit_realtime.TripDescriptor.verify(message.trip);\n                if (error)\n                    return \"trip.\" + error;\n            }\n            if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                if (!$util.isString(message.stopId))\n                    return \"stopId: string expected\";\n            if (message.directionId != null && message.hasOwnProperty(\"directionId\"))\n                if (!$util.isInteger(message.directionId))\n                    return \"directionId: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an EntitySelector message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.EntitySelector} EntitySelector\n         */\n        EntitySelector.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.EntitySelector)\n                return object;\n            var message = new $root.transit_realtime.EntitySelector();\n            if (object.agencyId != null)\n                message.agencyId = String(object.agencyId);\n            if (object.routeId != null)\n                message.routeId = String(object.routeId);\n            if (object.routeType != null)\n                message.routeType = object.routeType | 0;\n            if (object.trip != null) {\n                if (typeof object.trip !== \"object\")\n                    throw TypeError(\".transit_realtime.EntitySelector.trip: object expected\");\n                message.trip = $root.transit_realtime.TripDescriptor.fromObject(object.trip);\n            }\n            if (object.stopId != null)\n                message.stopId = String(object.stopId);\n            if (object.directionId != null)\n                message.directionId = object.directionId >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EntitySelector message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {transit_realtime.EntitySelector} message EntitySelector\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EntitySelector.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.agencyId = \"\";\n                object.routeId = \"\";\n                object.routeType = 0;\n                object.trip = null;\n                object.stopId = \"\";\n                object.directionId = 0;\n            }\n            if (message.agencyId != null && message.hasOwnProperty(\"agencyId\"))\n                object.agencyId = message.agencyId;\n            if (message.routeId != null && message.hasOwnProperty(\"routeId\"))\n                object.routeId = message.routeId;\n            if (message.routeType != null && message.hasOwnProperty(\"routeType\"))\n                object.routeType = message.routeType;\n            if (message.trip != null && message.hasOwnProperty(\"trip\"))\n                object.trip = $root.transit_realtime.TripDescriptor.toObject(message.trip, options);\n            if (message.stopId != null && message.hasOwnProperty(\"stopId\"))\n                object.stopId = message.stopId;\n            if (message.directionId != null && message.hasOwnProperty(\"directionId\"))\n                object.directionId = message.directionId;\n            return object;\n        };\n\n        /**\n         * Converts this EntitySelector to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.EntitySelector\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EntitySelector.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for EntitySelector\n         * @function getTypeUrl\n         * @memberof transit_realtime.EntitySelector\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        EntitySelector.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.EntitySelector\";\n        };\n\n        return EntitySelector;\n    })();\n\n    transit_realtime.TranslatedString = (function() {\n\n        /**\n         * Properties of a TranslatedString.\n         * @memberof transit_realtime\n         * @interface ITranslatedString\n         * @property {Array.<transit_realtime.TranslatedString.ITranslation>|null} [translation] TranslatedString translation\n         */\n\n        /**\n         * Constructs a new TranslatedString.\n         * @memberof transit_realtime\n         * @classdesc Represents a TranslatedString.\n         * @implements ITranslatedString\n         * @constructor\n         * @param {transit_realtime.ITranslatedString=} [properties] Properties to set\n         */\n        function TranslatedString(properties) {\n            this.translation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TranslatedString translation.\n         * @member {Array.<transit_realtime.TranslatedString.ITranslation>} translation\n         * @memberof transit_realtime.TranslatedString\n         * @instance\n         */\n        TranslatedString.prototype.translation = $util.emptyArray;\n\n        /**\n         * Creates a new TranslatedString instance using the specified properties.\n         * @function create\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {transit_realtime.ITranslatedString=} [properties] Properties to set\n         * @returns {transit_realtime.TranslatedString} TranslatedString instance\n         */\n        TranslatedString.create = function create(properties) {\n            return new TranslatedString(properties);\n        };\n\n        /**\n         * Encodes the specified TranslatedString message. Does not implicitly {@link transit_realtime.TranslatedString.verify|verify} messages.\n         * @function encode\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {transit_realtime.ITranslatedString} message TranslatedString message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TranslatedString.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.translation != null && message.translation.length)\n                for (var i = 0; i < message.translation.length; ++i)\n                    $root.transit_realtime.TranslatedString.Translation.encode(message.translation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TranslatedString message, length delimited. Does not implicitly {@link transit_realtime.TranslatedString.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {transit_realtime.ITranslatedString} message TranslatedString message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TranslatedString.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TranslatedString message from the specified reader or buffer.\n         * @function decode\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {transit_realtime.TranslatedString} TranslatedString\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TranslatedString.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TranslatedString();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.translation && message.translation.length))\n                            message.translation = [];\n                        message.translation.push($root.transit_realtime.TranslatedString.Translation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TranslatedString message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {transit_realtime.TranslatedString} TranslatedString\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TranslatedString.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TranslatedString message.\n         * @function verify\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TranslatedString.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.translation != null && message.hasOwnProperty(\"translation\")) {\n                if (!Array.isArray(message.translation))\n                    return \"translation: array expected\";\n                for (var i = 0; i < message.translation.length; ++i) {\n                    var error = $root.transit_realtime.TranslatedString.Translation.verify(message.translation[i]);\n                    if (error)\n                        return \"translation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TranslatedString message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {transit_realtime.TranslatedString} TranslatedString\n         */\n        TranslatedString.fromObject = function fromObject(object) {\n            if (object instanceof $root.transit_realtime.TranslatedString)\n                return object;\n            var message = new $root.transit_realtime.TranslatedString();\n            if (object.translation) {\n                if (!Array.isArray(object.translation))\n                    throw TypeError(\".transit_realtime.TranslatedString.translation: array expected\");\n                message.translation = [];\n                for (var i = 0; i < object.translation.length; ++i) {\n                    if (typeof object.translation[i] !== \"object\")\n                        throw TypeError(\".transit_realtime.TranslatedString.translation: object expected\");\n                    message.translation[i] = $root.transit_realtime.TranslatedString.Translation.fromObject(object.translation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TranslatedString message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {transit_realtime.TranslatedString} message TranslatedString\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TranslatedString.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.translation = [];\n            if (message.translation && message.translation.length) {\n                object.translation = [];\n                for (var j = 0; j < message.translation.length; ++j)\n                    object.translation[j] = $root.transit_realtime.TranslatedString.Translation.toObject(message.translation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TranslatedString to JSON.\n         * @function toJSON\n         * @memberof transit_realtime.TranslatedString\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TranslatedString.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TranslatedString\n         * @function getTypeUrl\n         * @memberof transit_realtime.TranslatedString\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TranslatedString.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/transit_realtime.TranslatedString\";\n        };\n\n        TranslatedString.Translation = (function() {\n\n            /**\n             * Properties of a Translation.\n             * @memberof transit_realtime.TranslatedString\n             * @interface ITranslation\n             * @property {string} text Translation text\n             * @property {string|null} [language] Translation language\n             */\n\n            /**\n             * Constructs a new Translation.\n             * @memberof transit_realtime.TranslatedString\n             * @classdesc Represents a Translation.\n             * @implements ITranslation\n             * @constructor\n             * @param {transit_realtime.TranslatedString.ITranslation=} [properties] Properties to set\n             */\n            function Translation(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Translation text.\n             * @member {string} text\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @instance\n             */\n            Translation.prototype.text = \"\";\n\n            /**\n             * Translation language.\n             * @member {string} language\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @instance\n             */\n            Translation.prototype.language = \"\";\n\n            /**\n             * Creates a new Translation instance using the specified properties.\n             * @function create\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {transit_realtime.TranslatedString.ITranslation=} [properties] Properties to set\n             * @returns {transit_realtime.TranslatedString.Translation} Translation instance\n             */\n            Translation.create = function create(properties) {\n                return new Translation(properties);\n            };\n\n            /**\n             * Encodes the specified Translation message. Does not implicitly {@link transit_realtime.TranslatedString.Translation.verify|verify} messages.\n             * @function encode\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {transit_realtime.TranslatedString.ITranslation} message Translation message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Translation.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);\n                if (message.language != null && Object.hasOwnProperty.call(message, \"language\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Translation message, length delimited. Does not implicitly {@link transit_realtime.TranslatedString.Translation.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {transit_realtime.TranslatedString.ITranslation} message Translation message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Translation.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Translation message from the specified reader or buffer.\n             * @function decode\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {transit_realtime.TranslatedString.Translation} Translation\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Translation.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.transit_realtime.TranslatedString.Translation();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.text = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.language = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                if (!message.hasOwnProperty(\"text\"))\n                    throw $util.ProtocolError(\"missing required 'text'\", { instance: message });\n                return message;\n            };\n\n            /**\n             * Decodes a Translation message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {transit_realtime.TranslatedString.Translation} Translation\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Translation.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Translation message.\n             * @function verify\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Translation.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (!$util.isString(message.text))\n                    return \"text: string expected\";\n                if (message.language != null && message.hasOwnProperty(\"language\"))\n                    if (!$util.isString(message.language))\n                        return \"language: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Translation message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {transit_realtime.TranslatedString.Translation} Translation\n             */\n            Translation.fromObject = function fromObject(object) {\n                if (object instanceof $root.transit_realtime.TranslatedString.Translation)\n                    return object;\n                var message = new $root.transit_realtime.TranslatedString.Translation();\n                if (object.text != null)\n                    message.text = String(object.text);\n                if (object.language != null)\n                    message.language = String(object.language);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Translation message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {transit_realtime.TranslatedString.Translation} message Translation\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Translation.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.text = \"\";\n                    object.language = \"\";\n                }\n                if (message.text != null && message.hasOwnProperty(\"text\"))\n                    object.text = message.text;\n                if (message.language != null && message.hasOwnProperty(\"language\"))\n                    object.language = message.language;\n                return object;\n            };\n\n            /**\n             * Converts this Translation to JSON.\n             * @function toJSON\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Translation.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Translation\n             * @function getTypeUrl\n             * @memberof transit_realtime.TranslatedString.Translation\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Translation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/transit_realtime.TranslatedString.Translation\";\n            };\n\n            return Translation;\n        })();\n\n        return TranslatedString;\n    })();\n\n    return transit_realtime;\n})();\n\nmodule.exports = $root;\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/gtfs-realtime-bindings/gtfs-realtime.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gtfs_realtime_bindings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gtfs-realtime-bindings */ \"./node_modules/gtfs-realtime-bindings/gtfs-realtime.js\");\n/* harmony import */ var gtfs_realtime_bindings__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gtfs_realtime_bindings__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./style.css */ \"./src/style.css\");\n\n\n\nconsole.log('CSS should be injected into the page!');\n\nconst head = document.getElementById(\"headerText\");\n\nfunction wave() {\n    console.log('wave!')\n    const hand = document.getElementById(\"wave\");\n    hand.style.transform = \"rotate(45deg)\";\n    setTimeout(() => {hand.style.transform = \"rotate(0deg)\";},250);\n    setTimeout(() => {hand.style.transform = \"rotate(45deg)\";},500);\n    setTimeout(() => {hand.style.transform = \"rotate(0deg)\";},750);\n}\n\nwindow.onload = () => {\n    setTimeout(wave,500);\n    \n};\n\nhead.addEventListener(\"mouseover\", wave);\n\nfunction getFeed(line) {\n    if (['A','C','E'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-ace\"\n    } else if (['G'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-g\"\n    } else if (['N','Q','R','W'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-nqrw\"\n    } else if (['1','2','3','4','5','6','7','7X','6X','GS'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs\"\n    } else if (['B','D','F','M'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-bdfm\"\n    } else if (['J','Z'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-jz\"\n    } else if (['L'].includes(line)) {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-l\"\n    } else if (line == 'SIR') {\n        return \"https://api-endpoint.mta.info/Dataservice/mtagtfsfeeds/nyct%2Fgtfs-si\"\n    }\n    return ''\n}\n\nconst stationIds = {\n    '627': '77 St',\n    '628': '68 St-Hunter College',\n    '632': '33 St',\n    '633': '28 St',\n    '634': '23 St',\n    '636': 'Astor Pl',\n    '638': 'Spring St',\n    '419': 'Wall St',\n    '420': 'Bowling Green',\n    '201': 'Wakefield-241 St',\n    '204': 'Nereid Av',\n    '205': '233 St',\n    '206': '225 St',\n    '207': '219 St',\n    '208': 'Gun Hill Rd',\n    '209': 'Burke Av',\n    '210': 'Allerton Av',\n    '211': 'Pelham Pkwy',\n    '212': 'Bronx Park East',\n    '213': 'E 180 St',\n    '214': 'West Farms Sq-E Tremont Av',\n    '215': '174 St',\n    '216': 'Freeman St',\n    '217': 'Simpson St',\n    '218': 'Intervale Av',\n    '219': 'Prospect Av',\n    '220': 'Jackson Av',\n    '221': '3 Av-149 St',\n    '301': 'Harlem-148 St',\n    '302': '145 St',\n    '224': '135 St',\n    '225': '125 St',\n    '226': '116 St',\n    '227': 'Central Park North (110 St)',\n    '501': 'Eastchester-Dyre Av',\n    '502': 'Baychester Av',\n    '503': 'Gun Hill Rd',\n    '504': 'Pelham Pkwy',\n    '505': 'Morris Park',\n    '701': 'Flushing-Main St',\n    '702': 'Mets-Willets Point',\n    '705': '111 St',\n    '706': '103 St-Corona Plaza',\n    '707': 'Junction Blvd',\n    '708': '90 St-Elmhurst Av',\n    '709': '82 St-Jackson Hts',\n    '711': '69 St',\n    '712': '61 St-Woodside',\n    '713': '52 St',\n    '714': '46 St-Bliss St',\n    '715': '40 St-Lowery St',\n    '716': '33 St-Rawson St',\n    '718': 'Queensboro Plaza',\n    'R09': 'Queensboro Plaza',\n    '720': 'Hunters Point Av',\n    '721': 'Vernon Blvd-Jackson Av',\n    '726': '34 St-Hudson Yards',\n    'Q05': '96 St',\n    'Q04': '86 St',\n    'Q03': '72 St',\n    'S31': 'St George',\n    'S30': 'Tompkinsville',\n    'S29': 'Stapleton',\n    'S28': 'Clifton',\n    'S27': 'Grasmere',\n    'S26': 'Old Town',\n    'S25': 'Dongan Hills',\n    'S24': 'Jefferson Av',\n    'S23': 'Grant City',\n    'S22': 'New Dorp',\n    'S21': 'Oakwood Heights',\n    'S20': 'Bay Terrace',\n    'S19': 'Great Kills',\n    'S18': 'Eltingville',\n    'S17': 'Annadale',\n    'S16': 'Huguenot',\n    'S15': \"Prince's Bay\",\n    'S14': 'Pleasant Plains',\n    'S13': 'Richmond Valley',\n    'S09': 'Tottenville',\n    'S11': 'Arthur Kill',\n    '132': '14 St; 6 Av',\n    'D19': '14 St; 6 Av',\n    'L02': '14 St; 6 Av',\n    '635': '14 St-Union Sq',\n    'L03': '14 St-Union Sq',\n    'R20': '14 St-Union Sq',\n    '222': '149 St-Grand Concourse',\n    '415': '149 St-Grand Concourse',\n    '414': '161 St-Yankee Stadium',\n    'D11': '161 St-Yankee Stadium',\n    '112': '168 St; 168 St-Washington Hts',\n    'A09': '168 St; 168 St-Washington Hts',\n    '719': 'Court Sq; Court Sq-23 St',\n    'F09': 'Court Sq; Court Sq-23 St',\n    'G22': 'Court Sq; Court Sq-23 St',\n    'D17': '34 St-Herald Sq',\n    'R17': '34 St-Herald Sq',\n    'F23': '4 Av-9 St',\n    'R33': '4 Av-9 St',\n    '724': '42 St-Bryant Pk; 5 Av',\n    'D16': '42 St-Bryant Pk; 5 Av',\n    '631': 'Grand Central-42 St',\n    '723': 'Grand Central-42 St',\n    '901': 'Grand Central-42 St',\n    '127': '42 St-Port Authority Bus Terminal; Times Sq-42 St',\n    '725': '42 St-Port Authority Bus Terminal; Times Sq-42 St',\n    '902': '42 St-Port Authority Bus Terminal; Times Sq-42 St',\n    'A27': '42 St-Port Authority Bus Terminal; Times Sq-42 St',\n    'R16': '42 St-Port Authority Bus Terminal; Times Sq-42 St',\n    '630': '51 St; Lexington Av/53 St',\n    'F11': '51 St; Lexington Av/53 St',\n    '629': '59 St; Lexington Av/59 St',\n    'R11': '59 St; Lexington Av/59 St',\n    '125': '59 St-Columbus Circle',\n    'A24': '59 St-Columbus Circle',\n    'B16': '62 St; New Utrecht Av',\n    'N04': '62 St; New Utrecht Av',\n    '710': '74 St-Broadway; Jackson Hts-Roosevelt Av',\n    'G14': '74 St-Broadway; Jackson Hts-Roosevelt Av',\n    '235': 'Atlantic Av-Barclays Ctr',\n    'D24': 'Atlantic Av-Barclays Ctr',\n    'R31': 'Atlantic Av-Barclays Ctr',\n    'A31': '14 St; 8 Av',\n    'L01': '14 St; 8 Av',\n    '637': 'Bleecker St; Broadway-Lafayette St',\n    'D21': 'Bleecker St; Broadway-Lafayette St',\n    '232': 'Borough Hall; Court St',\n    '423': 'Borough Hall; Court St',\n    'R28': 'Borough Hall; Court St',\n    'A51': 'Broadway Junction',\n    'J27': 'Broadway Junction',\n    'L22': 'Broadway Junction',\n    '640': 'Brooklyn Bridge-City Hall; Chambers St',\n    'M21': 'Brooklyn Bridge-City Hall; Chambers St',\n    '639': 'Canal St',\n    'M20': 'Canal St',\n    'Q01': 'Canal St',\n    'R23': 'Canal St',\n    '228': 'Chambers St; Cortlandt St; Park Place; World Trade Center',\n    'A36': 'Chambers St; Cortlandt St; Park Place; World Trade Center',\n    'E01': 'Chambers St; Cortlandt St; Park Place; World Trade Center',\n    'R25': 'Chambers St; Cortlandt St; Park Place; World Trade Center',\n    'F15': 'Delancey St-Essex St',\n    'M18': 'Delancey St-Essex St',\n    '239': 'Botanic Garden; Franklin Av-Medgar Evers College',\n    'S04': 'Botanic Garden; Franklin Av-Medgar Evers College',\n    'A45': 'Franklin Av',\n    'S01': 'Franklin Av',\n    '229': 'Fulton St',\n    '418': 'Fulton St',\n    'A38': 'Fulton St',\n    'M22': 'Fulton St',\n    'G29': 'Lorimer St; Metropolitan Av',\n    'L10': 'Lorimer St; Metropolitan Av',\n    'L17': 'Myrtle-Wyckoff Avs',\n    'M08': 'Myrtle-Wyckoff Avs',\n    '142': 'South Ferry; Whitehall St-South Ferry',\n    'R27': 'South Ferry; Whitehall St-South Ferry',\n    'A41': 'Jay St-MetroTech',\n    'R29': 'Jay St-MetroTech',\n    'G19': 'Steinway St',\n    'G20': '36 St',\n    'G21': 'Queens Plaza',\n    'F12': '5 Av/53 St',\n    'D14': '7 Av',\n    'G05': 'Jamaica Center-Parsons/Archer',\n    'G06': 'Sutphin Blvd-Archer Av-JFK Airport',\n    'G07': 'Jamaica-Van Wyck',\n    'G24': '21 St',\n    'G26': 'Greenpoint Av',\n    'G28': 'Nassau Av',\n    'G30': 'Broadway',\n    'G31': 'Flushing Av',\n    'G32': 'Myrtle-Willoughby Avs',\n    'G33': 'Bedford-Nostrand Avs',\n    'G34': 'Classon Av',\n    'G35': 'Clinton-Washington Avs',\n    'G36': 'Fulton St',\n    '101': 'Van Cortlandt Park-242 St',\n    '103': '238 St',\n    '104': '231 St',\n    '106': 'Marble Hill-225 St',\n    '107': '215 St',\n    '108': '207 St',\n    '109': 'Dyckman St',\n    '110': '191 St',\n    '111': '181 St',\n    '113': '157 St',\n    '114': '145 St',\n    '115': '137 St-City College',\n    '116': '125 St',\n    '117': '116 St-Columbia University',\n    '118': 'Cathedral Pkwy (110 St)',\n    '119': '103 St',\n    '120': '96 St',\n    '121': '86 St',\n    '122': '79 St',\n    '123': '72 St',\n    '124': '66 St-Lincoln Center',\n    '126': '50 St',\n    '128': '34 St-Penn Station',\n    '129': '28 St',\n    '130': '23 St',\n    '131': '18 St',\n    '133': 'Christopher St-Stonewall',\n    '134': 'Houston St',\n    '135': 'Canal St',\n    '136': 'Franklin St',\n    '137': 'Chambers St',\n    '138': 'WTC Cortlandt',\n    '139': 'Rector St',\n    '230': 'Wall St',\n    '231': 'Clark St',\n    '233': 'Hoyt St',\n    '234': 'Nevins St',\n    '236': 'Bergen St',\n    '237': 'Grand Army Plaza',\n    '238': 'Eastern Pkwy-Brooklyn Museum',\n    '248': 'Nostrand Av',\n    '249': 'Kingston Av',\n    '250': 'Crown Hts-Utica Av',\n    '251': 'Sutter Av-Rutland Rd',\n    '252': 'Saratoga Av',\n    '253': 'Rockaway Av',\n    '254': 'Junius St',\n    '255': 'Pennsylvania Av',\n    '256': 'Van Siclen Av',\n    '257': 'New Lots Av',\n    '241': 'President St-Medgar Evers College',\n    '242': 'Sterling St',\n    '243': 'Winthrop St',\n    '244': 'Church Av',\n    '245': 'Beverly Rd',\n    '246': 'Newkirk Av-Little Haiti',\n    '247': 'Flatbush Av-Brooklyn College',\n    '601': 'Pelham Bay Park',\n    '602': 'Buhre Av',\n    '603': 'Middletown Rd',\n    '604': 'Westchester Sq-E Tremont Av',\n    '606': 'Zerega Av',\n    '607': 'Castle Hill Av',\n    '608': 'Parkchester',\n    '609': 'St Lawrence Av',\n    '610': 'Morrison Av-Soundview',\n    '611': 'Elder Av',\n    '612': 'Whitlock Av',\n    '613': 'Hunts Point Av',\n    '614': 'Longwood Av',\n    '615': 'E 149 St',\n    '616': \"E 143 St-St Mary's St\",\n    '617': 'Cypress Av',\n    '618': 'Brook Av',\n    '619': '3 Av-138 St',\n    '401': 'Woodlawn',\n    '402': 'Mosholu Pkwy',\n    '405': 'Bedford Park Blvd-Lehman College',\n    '406': 'Kingsbridge Rd',\n    '407': 'Fordham Rd',\n    '408': '183 St',\n    '409': 'Burnside Av',\n    '410': '176 St',\n    '411': 'Mt Eden Av',\n    '412': '170 St',\n    '413': '167 St',\n    '416': '138 St-Grand Concourse',\n    '621': '125 St',\n    '622': '116 St',\n    '623': '110 St',\n    '624': '103 St',\n    '625': '96 St',\n    '626': '86 St',\n    'S03': 'Park Pl',\n    'A02': 'Inwood-207 St',\n    'A03': 'Dyckman St',\n    'A05': '190 St',\n    'A06': '181 St',\n    'A07': '175 St',\n    'A10': '163 St-Amsterdam Av',\n    'A11': '155 St',\n    'A12': '145 St',\n    'D13': '145 St',\n    'A14': '135 St',\n    'A15': '125 St',\n    'A16': '116 St',\n    'A17': 'Cathedral Pkwy (110 St)',\n    'A18': '103 St',\n    'A19': '96 St',\n    'A20': '86 St',\n    'A21': '81 St-Museum of Natural History',\n    'A22': '72 St',\n    'A25': '50 St',\n    'A28': '34 St-Penn Station',\n    'A30': '23 St',\n    'A32': 'W 4 St-Wash Sq',\n    'D20': 'W 4 St-Wash Sq',\n    'A33': 'Spring St',\n    'A34': 'Canal St',\n    'A40': 'High St',\n    'A42': 'Hoyt-Schermerhorn Sts',\n    'A43': 'Lafayette Av',\n    'A44': 'Clinton-Washington Avs',\n    'A46': 'Nostrand Av',\n    'A47': 'Kingston-Throop Avs',\n    'A48': 'Utica Av',\n    'A49': 'Ralph Av',\n    'A50': 'Rockaway Av',\n    'A52': 'Liberty Av',\n    'A53': 'Van Siclen Av',\n    'A54': 'Shepherd Av',\n    'A55': 'Euclid Av',\n    'A57': 'Grant Av',\n    'A59': '80 St',\n    'A60': '88 St',\n    'A61': 'Rockaway Blvd',\n    'A63': '104 St',\n    'A64': '111 St',\n    'A65': 'Ozone Park-Lefferts Blvd',\n    'H01': 'Aqueduct Racetrack',\n    'H02': 'Aqueduct-N Conduit Av',\n    'H03': 'Howard Beach-JFK Airport',\n    'H04': 'Broad Channel',\n    'H12': 'Beach 90 St',\n    'H13': 'Beach 98 St',\n    'H14': 'Beach 105 St',\n    'H15': 'Rockaway Park-Beach 116 St',\n    'H06': 'Beach 67 St',\n    'H07': 'Beach 60 St',\n    'H08': 'Beach 44 St',\n    'H09': 'Beach 36 St',\n    'H10': 'Beach 25 St',\n    'H11': 'Far Rockaway-Mott Av',\n    'D01': 'Norwood-205 St',\n    'D03': 'Bedford Park Blvd',\n    'D04': 'Kingsbridge Rd',\n    'D05': 'Fordham Rd',\n    'D06': '182-183 Sts',\n    'D07': 'Tremont Av',\n    'D08': '174-175 Sts',\n    'D09': '170 St',\n    'D10': '167 St',\n    'D12': '155 St',\n    'B04': '21 St-Queensbridge',\n    'B06': 'Roosevelt Island',\n    'B08': 'Lexington Av/63 St',\n    'B10': '57 St',\n    'D15': '47-50 Sts-Rockefeller Ctr',\n    'D18': '23 St',\n    'D22': 'Grand St',\n    'F14': '2 Av',\n    'F16': 'East Broadway',\n    'F18': 'York St',\n    'F20': 'Bergen St',\n    'F21': 'Carroll St',\n    'F22': 'Smith-9 Sts',\n    'F24': '7 Av',\n    'F25': '15 St-Prospect Park',\n    'F26': 'Fort Hamilton Pkwy',\n    'F27': 'Church Av',\n    'F29': 'Ditmas Av',\n    'F30': '18 Av',\n    'F31': 'Avenue I',\n    'F32': 'Bay Pkwy',\n    'F33': 'Avenue N',\n    'F34': 'Avenue P',\n    'F35': 'Kings Hwy',\n    'F36': 'Avenue U',\n    'F38': 'Avenue X',\n    'F39': 'Neptune Av',\n    'F01': 'Jamaica-179 St',\n    'F02': '169 St',\n    'F03': 'Parsons Blvd',\n    'F04': 'Sutphin Blvd',\n    'F05': 'Briarwood',\n    'F06': 'Kew Gardens-Union Tpke',\n    'F07': '75 Av',\n    'G08': 'Forest Hills-71 Av',\n    'G09': '67 Av',\n    'G10': '63 Dr-Rego Park',\n    'G11': 'Woodhaven Blvd',\n    'G12': 'Grand Av-Newtown',\n    'G13': 'Elmhurst Av',\n    'G15': '65 St',\n    'G16': 'Northern Blvd',\n    'G18': '46 St',\n    'R01': 'Astoria-Ditmars Blvd',\n    'R03': 'Astoria Blvd',\n    'R04': '30 Av',\n    'R05': 'Broadway',\n    'R06': '36 Av',\n    'R08': '39 Av-Dutch Kills',\n    'R13': '5 Av/59 St',\n    'R14': '57 St-7 Av',\n    'R15': '49 St',\n    'R18': '28 St',\n    'R19': '23 St',\n    'R21': '8 St-NYU',\n    'R22': 'Prince St',\n    'R24': 'City Hall',\n    'R26': 'Rector St',\n    'R30': 'DeKalb Av',\n    'R32': 'Union St',\n    'R34': 'Prospect Av',\n    'R35': '25 St',\n    'R36': '36 St',\n    'R39': '45 St',\n    'R40': '53 St',\n    'R41': '59 St',\n    'R42': 'Bay Ridge Av',\n    'R43': '77 St',\n    'R44': '86 St',\n    'R45': 'Bay Ridge-95 St',\n    'D25': '7 Av',\n    'D26': 'Prospect Park',\n    'D27': 'Parkside Av',\n    'D28': 'Church Av',\n    'D29': 'Beverley Rd',\n    'D30': 'Cortelyou Rd',\n    'D31': 'Newkirk Plaza',\n    'D32': 'Avenue H',\n    'D33': 'Avenue J',\n    'D34': 'Avenue M',\n    'D35': 'Kings Hwy',\n    'D37': 'Avenue U',\n    'D38': 'Neck Rd',\n    'D39': 'Sheepshead Bay',\n    'D40': 'Brighton Beach',\n    'D41': 'Ocean Pkwy',\n    'D42': 'W 8 St-NY Aquarium',\n    'D43': 'Coney Island-Stillwell Av',\n    'B12': '9 Av',\n    'B13': 'Fort Hamilton Pkwy',\n    'B14': '50 St',\n    'B15': '55 St',\n    'B17': '71 St',\n    'B18': '79 St',\n    'B19': '18 Av',\n    'B20': '20 Av',\n    'B21': 'Bay Pkwy',\n    'B22': '25 Av',\n    'B23': 'Bay 50 St',\n    'N02': '8 Av',\n    'N03': 'Fort Hamilton Pkwy',\n    'N05': '18 Av',\n    'N06': '20 Av',\n    'N07': 'Bay Pkwy',\n    'N08': 'Kings Hwy',\n    'N09': 'Avenue U',\n    'N10': '86 St',\n    'J12': '121 St',\n    'J13': '111 St',\n    'J14': '104 St',\n    'J15': 'Woodhaven Blvd',\n    'J16': '85 St-Forest Pkwy',\n    'J17': '75 St-Elderts Ln',\n    'J19': 'Cypress Hills',\n    'J20': 'Crescent St',\n    'J21': 'Norwood Av',\n    'J22': 'Cleveland St',\n    'J23': 'Van Siclen Av',\n    'J24': 'Alabama Av',\n    'J28': 'Chauncey St',\n    'J29': 'Halsey St',\n    'J30': 'Gates Av',\n    'J31': 'Kosciuszko St',\n    'M11': 'Myrtle Av',\n    'M12': 'Flushing Av',\n    'M13': 'Lorimer St',\n    'M14': 'Hewes St',\n    'M16': 'Marcy Av',\n    'M19': 'Bowery',\n    'M23': 'Broad St',\n    'M01': 'Middle Village-Metropolitan Av',\n    'M04': 'Fresh Pond Rd',\n    'M05': 'Forest Av',\n    'M06': 'Seneca Av',\n    'M09': 'Knickerbocker Av',\n    'M10': 'Central Av',\n    'L05': '3 Av',\n    'L06': '1 Av',\n    'L08': 'Bedford Av',\n    'L11': 'Graham Av',\n    'L12': 'Grand St',\n    'L13': 'Montrose Av',\n    'L14': 'Morgan Av',\n    'L15': 'Jefferson St',\n    'L16': 'DeKalb Av',\n    'L19': 'Halsey St',\n    'L20': 'Wilson Av',\n    'L21': 'Bushwick Av-Aberdeen St',\n    'L24': 'Atlantic Av',\n    'L25': 'Sutter Av',\n    'L26': 'Livonia Av',\n    'L27': 'New Lots Av',\n    'L28': 'East 105 St',\n    'L29': 'Canarsie-Rockaway Pkwy'\n}\n\nfunction unixTimeToDateTime(unixTime) {\n    const date = new Date(unixTime * 1000);\n    return date.toLocaleString();\n  }\n\n  function parseGtfs(entity, line) {\n    if (entity.tripUpdate && entity.tripUpdate.trip.routeId === line) {\n      for (let update of entity.tripUpdate.stopTimeUpdate) {\n\n        let time = update.arrival ? update.arrival.time : update.departure;\n        \n        if (time == null) {\n          console.log('Time is null');\n          continue;\n        }\n        \n        if (time >= Math.floor(Date.now() / 1000) && time <= Math.floor(Date.now() / 1000) + (3600*2)) {\n\n          let directionChar = update.stopId.slice(-1);\n          let direction;\n          if (directionChar === 'N') {\n            direction = 'Uptown';\n          } else if (directionChar === 'S') {\n            direction = 'Downtown';\n          } else {\n            direction = 'ERROR';\n          }\n          \n\n          return {\n            line: line,\n            nextStopId: update.stopId,\n            nextStop: stationIds[update.stopId.slice(0, -1)], \n            direction: direction,\n            arrivalUnix: update.arrival ? update.arrival.time : null,\n            arrival: unixTimeToDateTime(update.arrival ? update.arrival.time : null),\n            departure: unixTimeToDateTime(update.departure)\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function createArrivalTable(updates, title) {\n    const table = document.createElement('table');\n    table.style.borderCollapse = 'collapse';\n    table.style.width = '100%';\n\n    // title\n    const caption = table.createCaption();\n    caption.textContent = title;\n    caption.style.fontWeight = 'bold';\n    caption.style.padding = '8px';\n  \n    // header\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n  \n    const headers = ['Next Stop', 'Arrival Time'];\n    headers.forEach(headerText => {\n      const th = document.createElement('th');\n      th.textContent = headerText;\n    //   th.style.border = '1px solid #000';\n    //   th.style.padding = '8px';\n      headerRow.appendChild(th);\n    });\n  \n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n  \n    //body\n    const tbody = document.createElement('tbody');\n  \n    updates.forEach(update => {\n      const row = document.createElement('tr');\n  \n      const tdStop = document.createElement('td');\n      tdStop.textContent = update.nextStop;\n      row.appendChild(tdStop);\n  \n      const tdArrival = document.createElement('td');\n      tdArrival.textContent = update.arrival;\n      row.appendChild(tdArrival);\n  \n      tbody.appendChild(row);\n    });\n  \n    table.appendChild(tbody);\n  \n    return table\n  }\n\nasync function fetchSubway(line) {\n    console.log('were in')\n\n    try {\n        let url = getFeed(line)\n        console.log(`Attempt to get subway line ${line} from ${url}`)\n        const response = await fetch(url);\n        console.log(response.ok)\n        if (!response.ok) {\n            const error = new Error(\n                `${response.url}: ${response.status} ${response.statusText}`\n            );\n        \n        } \n        console.log('fsdf');\n        const buffer = await response.arrayBuffer();\n        const feed = gtfs_realtime_bindings__WEBPACK_IMPORTED_MODULE_0___default().transit_realtime.FeedMessage.decode(\n            new Uint8Array(buffer)\n        );\n        let updates = [];\n        console.log('fetching updates')\n        feed.entity.forEach((entity) => {\n            let parsed = parseGtfs(entity, line)\n            if (parsed != null) {\n                updates.push(parsed);\n            }\n        });\n        if (updates.length == 0) {\n            let display = document.getElementById('subwayDisplay')\n            let text = document.createElement('p')\n            text.innerText = 'No Upcoming Trains'\n            display.append(text)\n        } else {\n            updates.sort((a, b) => {\n                if (a.arrivalUnix < b.arrivalUnix) {\n                    return -1\n                }\n                if (a.arrivalUnix > b.arrivalUnix) {\n                    return 1\n                }\n                return 0\n            })\n            let uptown = []\n            let downtown = []\n            updates.forEach((stop) => {\n                if (stop.direction == 'Uptown') {\n                    uptown.push(stop);\n                } else if  (stop.direction == 'Downtown') {\n                    downtown.push(stop);\n                } \n            })\n    \n            let tablediv = document.getElementById('tables')\n            let uptownTable = createArrivalTable(uptown, 'Downtown-bound Arrivals');\n            let downtownTable = createArrivalTable(downtown, 'Uptown-bound Arrivals');\n            tablediv.appendChild(uptownTable)\n            tablediv.appendChild(downtownTable)\n        }\n\n        \n        \n    } catch(error) {\n        console.log('Error!');\n        console.log(error);\n    } finally {\n        console.log('end');\n    }\n}\n\nconst subwayIcons = document.getElementsByClassName('subwayIcon')\n\n\nArray.prototype.forEach.call(subwayIcons, function (icon) {\n    \n    icon.addEventListener('click', (event) => {\n        let line = icon.id.split('-')[1]\n        let display = document.getElementById('subwayDisplay')\n\n        while (display.firstChild) {\n            display.removeChild(display.firstChild);\n        }\n        let clone = icon.cloneNode(true)\n        clone.className = 'activeLine'\n        display.appendChild(clone)\n        let tablediv = document.createElement('div')\n        tablediv.id = 'tables'\n        display.appendChild(tablediv)\n        fetchSubway(line)\n    })\n})\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./src/index.js?");


/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./style.css */ \"./node_modules/css-loader/dist/cjs.js!./src/style.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://about-mitkrieg-cs5356-hw3/./src/style.css?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;